{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MumbaiHacks AI Health - Future Healthcare Technology Platform\n\n## Overview\n\nMumbaiHacks AI Health is a comprehensive futuristic hackathon project showcasing next-generation healthcare technology. The platform combines AI-powered surge management, patient journey optimization, AR vision capabilities, and intelligent healthcare advisory services. Built as a sophisticated multi-page web application with glassmorphic design and advanced interactive features, it demonstrates cutting-edge web development while presenting an impressive hackathon solution for healthcare innovation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Styling**: Tailwind CSS with custom glassmorphism design system featuring neon gradients and dark mode\n- **UI Components**: Radix UI primitives with custom shadcn/ui components for consistent, accessible interface\n- **Routing**: Multi-page application using Wouter for lightweight client-side routing\n- **Pages**: Multi-page application with Home (/), Dashboard (/dashboard), Simulator (/simulator), Advisory (/advisory), Map (/map), Patient Journey (/patient-journey), and AR Vision (/ar-vision)\n- **State Management**: TanStack Query for server state management and caching\n- **Animation**: CSS-based animations for glassmorphic effects, hover states, and real-time data updates\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for API endpoints\n- **Architecture Pattern**: RESTful API design with modular route handlers\n- **Storage Layer**: In-memory storage with interface abstraction for future database integration\n- **Data Validation**: Zod schemas for runtime type checking and validation\n- **Development Server**: Vite integration for hot module replacement and development tooling\n\n### Database Design\n- **ORM**: Drizzle ORM configured for PostgreSQL with migration support\n- **Schema**: Four main entities - hospitals, surge data, health advisories, and AI predictions\n- **Provider**: Neon Database (@neondatabase/serverless) for PostgreSQL hosting\n- **Migration**: Drizzle Kit for schema migrations and database management\n\n### Data Models\n- **Hospitals**: Location data, bed availability, ICU capacity, status tracking\n- **Surge Data**: Patient inflow predictions, AI confidence scores, timestamps\n- **Health Advisories**: AQI alerts, medical advisories, severity levels\n- **AI Predictions**: Surge forecasts, staffing recommendations, supply alerts\n\n### UI/UX Design System\n- **Theme**: Dark mode with glassmorphism (frosted glass effects)\n- **Color Palette**: Neon cyan, purple, and blue accents on dark backgrounds\n- **Typography**: Inter font family for clean, modern readability\n- **Animations**: Glow effects, hover states, and smooth transitions\n- **Responsive**: Mobile-first design with breakpoint-specific layouts\n\n### Component Architecture\n- **Glass Cards**: Reusable glassmorphic container components\n- **Dashboard Widgets**: Modular components for different data visualizations\n- **Real-time Updates**: Simulated live data with periodic refresh mechanisms\n- **Interactive Maps**: Mumbai hospital locations with status indicators\n\n### Build & Development\n- **Build Tool**: Vite for fast development and optimized production builds\n- **TypeScript**: Strict configuration with path mapping for clean imports\n- **Asset Handling**: Vite asset optimization and static file serving\n- **Development**: Hot reload with error overlay and development tools\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, TypeScript support\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives (dialogs, dropdowns, forms)\n- **Lucide React**: Modern icon library\n- **Class Variance Authority**: Type-safe component variants\n\n### Database & Validation\n- **Drizzle ORM**: Type-safe database queries and schema management\n- **Neon Database**: Serverless PostgreSQL provider\n- **Zod**: Runtime type validation and schema definitions\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **ESBuild**: Fast JavaScript bundler for production\n- **TSX**: TypeScript execution for development\n\n### Utility Libraries\n- **Date-fns**: Date manipulation and formatting\n- **CLSX**: Conditional CSS class composition\n- **Nanoid**: Unique ID generation\n\n### Form & Input Handling\n- **React Hook Form**: Form state management\n- **Hookform Resolvers**: Zod integration for form validation\n\nThe application is designed to showcase modern web development practices while creating an impressive demonstration of AI-powered healthcare management for hackathon judges.","size_bytes":4896},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        neon: {\n          cyan: \"var(--neon-cyan)\",\n          purple: \"var(--neon-purple)\",\n          blue: \"var(--neon-blue)\",\n        },\n        space: {\n          900: \"var(--space-900)\",\n          800: \"var(--space-800)\",\n          700: \"var(--space-700)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      animation: {\n        \"pulse-glow\": \"pulse-glow 2s ease-in-out infinite alternate\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"slide-up\": \"slide-up 0.8s ease-out\",\n        \"glow\": \"glow 2s ease-in-out infinite alternate\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        \"pulse-glow\": {\n          \"from\": { \"box-shadow\": \"0 0 20px rgba(0, 217, 255, 0.4)\" },\n          \"to\": { \"box-shadow\": \"0 0 40px rgba(0, 217, 255, 0.8), 0 0 60px rgba(0, 217, 255, 0.4)\" }\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" }\n        },\n        \"slide-up\": {\n          \"from\": { transform: \"translateY(100px)\", opacity: \"0\" },\n          \"to\": { transform: \"translateY(0px)\", opacity: \"1\" }\n        },\n        \"glow\": {\n          \"from\": { \"text-shadow\": \"0 0 20px currentColor\" },\n          \"to\": { \"text-shadow\": \"0 0 40px currentColor, 0 0 60px currentColor\" }\n        },\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3383},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertHospitalSchema, insertSurgeDataSchema, insertHealthAdvisorySchema, insertAiPredictionSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Hospitals endpoints\n  app.get(\"/api/hospitals\", async (_req, res) => {\n    try {\n      const hospitals = await storage.getHospitals();\n      res.json(hospitals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hospitals\" });\n    }\n  });\n\n  app.get(\"/api/hospitals/:id\", async (req, res) => {\n    try {\n      const hospital = await storage.getHospital(req.params.id);\n      if (!hospital) {\n        return res.status(404).json({ error: \"Hospital not found\" });\n      }\n      res.json(hospital);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hospital\" });\n    }\n  });\n\n  app.post(\"/api/hospitals\", async (req, res) => {\n    try {\n      const validatedData = insertHospitalSchema.parse(req.body);\n      const hospital = await storage.createHospital(validatedData);\n      res.status(201).json(hospital);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid hospital data\" });\n    }\n  });\n\n  app.put(\"/api/hospitals/:id\", async (req, res) => {\n    try {\n      const updates = insertHospitalSchema.partial().parse(req.body);\n      const hospital = await storage.updateHospital(req.params.id, updates);\n      if (!hospital) {\n        return res.status(404).json({ error: \"Hospital not found\" });\n      }\n      res.json(hospital);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid update data\" });\n    }\n  });\n\n  // Surge data endpoints\n  app.get(\"/api/surge-data\", async (_req, res) => {\n    try {\n      const surgeData = await storage.getSurgeData();\n      res.json(surgeData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch surge data\" });\n    }\n  });\n\n  app.get(\"/api/surge-data/:hospitalId\", async (req, res) => {\n    try {\n      const surgeData = await storage.getHospitalSurgeData(req.params.hospitalId);\n      res.json(surgeData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hospital surge data\" });\n    }\n  });\n\n  app.post(\"/api/surge-data\", async (req, res) => {\n    try {\n      const validatedData = insertSurgeDataSchema.parse(req.body);\n      const surgeData = await storage.createSurgeData(validatedData);\n      res.status(201).json(surgeData);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid surge data\" });\n    }\n  });\n\n  // Health advisories endpoints\n  app.get(\"/api/health-advisories\", async (_req, res) => {\n    try {\n      const advisories = await storage.getActiveHealthAdvisories();\n      res.json(advisories);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch health advisories\" });\n    }\n  });\n\n  app.post(\"/api/health-advisories\", async (req, res) => {\n    try {\n      const validatedData = insertHealthAdvisorySchema.parse(req.body);\n      const advisory = await storage.createHealthAdvisory(validatedData);\n      res.status(201).json(advisory);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid advisory data\" });\n    }\n  });\n\n  // AI predictions endpoints\n  app.get(\"/api/ai-predictions\", async (_req, res) => {\n    try {\n      const predictions = await storage.getAiPredictions();\n      res.json(predictions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch AI predictions\" });\n    }\n  });\n\n  app.post(\"/api/ai-predictions\", async (req, res) => {\n    try {\n      const validatedData = insertAiPredictionSchema.parse(req.body);\n      const prediction = await storage.createAiPrediction(validatedData);\n      res.status(201).json(prediction);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid prediction data\" });\n    }\n  });\n\n  // Enhanced Dashboard stats endpoint\n  app.get(\"/api/dashboard-stats\", async (_req, res) => {\n    try {\n      const hospitals = await storage.getHospitals();\n      const predictions = await storage.getAiPredictions();\n      \n      const stats = {\n        nextSurge: \"18% Rise\",\n        currentAqi: 284,\n        preparednessScore: 78,\n        patientInflow: {\n          current: 47,\n          emergency: 12,\n          icu: 8,\n          general: 19,\n          outpatient: 8\n        },\n        cityOverview: {\n          totalHospitals: hospitals.length,\n          availableBeds: hospitals.reduce((sum, h) => sum + h.bedsAvailable, 0),\n          icuCapacity: Math.round((hospitals.reduce((sum, h) => sum + h.icuCapacity, 0) / hospitals.length) * 100 / 20), // Percentage\n          alertLevel: \"Medium\"\n        }\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Enhanced 7-day surge forecast endpoint\n  app.get(\"/api/surge-forecast\", async (_req, res) => {\n    try {\n      const forecast = Array.from({ length: 7 }, (_, i) => {\n        const date = new Date();\n        date.setDate(date.getDate() + i);\n        return {\n          day: date.toLocaleDateString('en-US', { weekday: 'short' }),\n          date: date.toISOString().split('T')[0],\n          predicted: Math.floor(Math.random() * 50) + 40 + (i * 3),\n          confidence: Math.floor(Math.random() * 20) + 75,\n          upperBound: Math.floor(Math.random() * 20) + 80 + (i * 4),\n          lowerBound: Math.floor(Math.random() * 15) + 30 + (i * 2),\n          riskLevel: i < 2 ? 'low' : i < 5 ? 'medium' : 'high'\n        };\n      });\n      \n      res.json(forecast);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch surge forecast\" });\n    }\n  });\n\n  // Hospital performance leaderboard endpoint\n  app.get(\"/api/hospital-leaderboard\", async (_req, res) => {\n    try {\n      const hospitals = await storage.getHospitals();\n      \n      const leaderboard = hospitals.map((hospital, index) => ({\n        id: hospital.id,\n        name: hospital.name,\n        score: Math.floor(Math.random() * 40) + 60,\n        efficiency: Math.floor(Math.random() * 30) + 70,\n        patientSatisfaction: Math.floor(Math.random() * 25) + 75,\n        responseTime: Math.floor(Math.random() * 10) + 8,\n        rank: index + 1,\n        trend: Math.random() > 0.5 ? 'up' : 'down',\n        badge: index === 0 ? 'gold' : index === 1 ? 'silver' : index === 2 ? 'bronze' : null\n      })).sort((a, b) => b.score - a.score);\n      \n      res.json(leaderboard);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hospital leaderboard\" });\n    }\n  });\n\n  // Resource optimization suggestions endpoint\n  app.get(\"/api/resource-optimization\", async (_req, res) => {\n    try {\n      const optimizations = {\n        staffing: [\n          {\n            type: 'shortage',\n            department: 'Emergency',\n            current: 12,\n            recommended: 16,\n            urgency: 'high',\n            impact: 'Patient wait times reduced by 35%',\n            action: 'Transfer 4 nurses from General Ward'\n          },\n          {\n            type: 'surplus',\n            department: 'General Ward',\n            current: 24,\n            recommended: 20,\n            urgency: 'medium',\n            impact: 'Optimize resource allocation',\n            action: 'Redeploy 4 nurses to Emergency'\n          }\n        ],\n        equipment: [\n          {\n            item: 'Ventilators',\n            current: 8,\n            recommended: 12,\n            urgency: 'critical',\n            reason: 'Surge prediction indicates 40% increase',\n            supplier: 'MediEquip Mumbai',\n            eta: '4 hours'\n          },\n          {\n            item: 'Oxygen Cylinders',\n            current: 45,\n            recommended: 65,\n            urgency: 'high',\n            reason: 'AQI spike affecting respiratory cases',\n            supplier: 'OxyGen Solutions',\n            eta: '2 hours'\n          }\n        ],\n        beds: [\n          {\n            type: 'ICU',\n            current: 85,\n            recommended: 95,\n            urgency: 'medium',\n            action: 'Convert 10 general beds to ICU configuration'\n          }\n        ]\n      };\n      \n      res.json(optimizations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch resource optimization\" });\n    }\n  });\n\n  // Emergency alerts endpoint with sound trigger capability\n  app.get(\"/api/emergency-alerts\", async (_req, res) => {\n    try {\n      const alerts = [\n        {\n          id: 'surge-001',\n          type: 'surge',\n          level: 'critical',\n          message: 'Mass casualty event detected - 15+ ambulances incoming',\n          hospital: 'KEM Hospital',\n          timestamp: new Date(),\n          soundAlert: true,\n          color: 'red'\n        },\n        {\n          id: 'supply-002',\n          type: 'supply',\n          level: 'high',\n          message: 'Oxygen supply critically low - 2 hours remaining',\n          hospital: 'Hinduja Hospital',\n          timestamp: new Date(Date.now() - 300000),\n          soundAlert: false,\n          color: 'orange'\n        },\n        {\n          id: 'staff-003',\n          type: 'staffing',\n          level: 'medium',\n          message: 'Emergency department understaffed - need 3 doctors',\n          hospital: 'Tata Memorial',\n          timestamp: new Date(Date.now() - 600000),\n          soundAlert: false,\n          color: 'yellow'\n        }\n      ];\n      \n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch emergency alerts\" });\n    }\n  });\n\n  // AI Heatmap data endpoint\n  app.get(\"/api/map-heatmap\", async (_req, res) => {\n    try {\n      const heatmapData = {\n        patientInflow: [\n          { lat: 19.0896, lng: 72.8656, intensity: 0.8, radius: 0.02 }, // Bandra\n          { lat: 19.0176, lng: 72.8562, intensity: 0.6, radius: 0.015 }, // Worli  \n          { lat: 19.0761, lng: 72.8775, intensity: 0.9, radius: 0.025 }, // Andheri\n          { lat: 19.1136, lng: 72.8697, intensity: 0.4, radius: 0.01 }, // Malad\n          { lat: 19.0330, lng: 72.8697, intensity: 0.7, radius: 0.018 }  // Dadar\n        ],\n        pollution: [\n          { lat: 19.0728, lng: 72.8826, intensity: 0.9, radius: 0.03 }, // High AQI - Andheri East\n          { lat: 19.0896, lng: 72.8656, intensity: 0.7, radius: 0.025 }, // Moderate - Bandra\n          { lat: 19.0176, lng: 72.8562, intensity: 0.5, radius: 0.02 }, // Lower - Worli\n          { lat: 19.1136, lng: 72.8697, intensity: 0.8, radius: 0.022 }  // High - Malad\n        ],\n        outbreaks: [\n          { lat: 19.0896, lng: 72.8656, intensity: 0.6, radius: 0.015, type: 'respiratory' },\n          { lat: 19.0761, lng: 72.8775, intensity: 0.4, radius: 0.012, type: 'gastrointestinal' },\n          { lat: 19.0330, lng: 72.8697, intensity: 0.3, radius: 0.008, type: 'fever' }\n        ]\n      };\n      \n      res.json(heatmapData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch heatmap data\" });\n    }\n  });\n\n  // Predictive surge zones endpoint\n  app.get(\"/api/surge-zones\", async (_req, res) => {\n    try {\n      const surgeZones = [\n        {\n          id: 'zone-1',\n          name: 'Bandra East',\n          coordinates: [\n            { lat: 19.0896, lng: 72.8656 },\n            { lat: 19.0920, lng: 72.8680 },\n            { lat: 19.0940, lng: 72.8640 },\n            { lat: 19.0916, lng: 72.8620 }\n          ],\n          riskLevel: 'high',\n          surgePrediction: '65% surge risk',\n          timeframe: '24 hrs',\n          confidence: 89,\n          triggers: ['Festival crowd', 'AQI spike', 'Traffic accidents']\n        },\n        {\n          id: 'zone-2', \n          name: 'Andheri West',\n          coordinates: [\n            { lat: 19.0761, lng: 72.8775 },\n            { lat: 19.0780, lng: 72.8800 },\n            { lat: 19.0800, lng: 72.8750 },\n            { lat: 19.0781, lng: 72.8730 }\n          ],\n          riskLevel: 'medium',\n          surgePrediction: '35% surge risk',\n          timeframe: '48 hrs',\n          confidence: 76,\n          triggers: ['Pollution levels', 'Weekend events']\n        },\n        {\n          id: 'zone-3',\n          name: 'Worli-Dadar',\n          coordinates: [\n            { lat: 19.0176, lng: 72.8562 },\n            { lat: 19.0200, lng: 72.8580 },\n            { lat: 19.0220, lng: 72.8540 },\n            { lat: 19.0196, lng: 72.8520 }\n          ],\n          riskLevel: 'low',\n          surgePrediction: '15% surge risk', \n          timeframe: '72 hrs',\n          confidence: 82,\n          triggers: ['Seasonal patterns']\n        }\n      ];\n      \n      res.json(surgeZones);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch surge zones\" });\n    }\n  });\n\n  // Hospital flow lines endpoint\n  app.get(\"/api/hospital-flows\", async (_req, res) => {\n    try {\n      const flows = [\n        {\n          from: { id: '4', name: 'Jupiter Hospital', lat: 19.0456, lng: 72.8735 },\n          to: { id: '1', name: 'Kokilaben Hospital', lat: 19.0728, lng: 72.8826 },\n          patientCount: 8,\n          urgency: 'high',\n          type: 'overflow_transfer',\n          eta: '15 min'\n        },\n        {\n          from: { id: '2', name: 'Hinduja Hospital', lat: 19.0330, lng: 72.8697 },\n          to: { id: '3', name: 'Breach Candy Hospital', lat: 19.0176, lng: 72.8562 },\n          patientCount: 3,\n          urgency: 'medium', \n          type: 'specialist_referral',\n          eta: '22 min'\n        },\n        {\n          from: { id: '1', name: 'Kokilaben Hospital', lat: 19.0728, lng: 72.8826 },\n          to: { id: '4', name: 'Jupiter Hospital', lat: 19.0456, lng: 72.8735 },\n          patientCount: 5,\n          urgency: 'low',\n          type: 'load_balancing',\n          eta: '18 min'\n        }\n      ];\n      \n      res.json(flows);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hospital flows\" });\n    }\n  });\n\n  // Ambulance tracking endpoint\n  app.get(\"/api/ambulance-tracking\", async (_req, res) => {\n    try {\n      const ambulances = Array.from({ length: 12 }, (_, i) => {\n        const routes = [\n          [{ lat: 19.0896, lng: 72.8656 }, { lat: 19.0728, lng: 72.8826 }], // Bandra to Andheri\n          [{ lat: 19.0330, lng: 72.8697 }, { lat: 19.0176, lng: 72.8562 }], // Dadar to Worli\n          [{ lat: 19.0761, lng: 72.8775 }, { lat: 19.0456, lng: 72.8735 }], // Andheri to Thane\n          [{ lat: 19.1136, lng: 72.8697 }, { lat: 19.0896, lng: 72.8656 }]  // Malad to Bandra\n        ];\n        \n        const route = routes[i % routes.length];\n        const progress = Math.random();\n        \n        return {\n          id: `amb-${i + 1}`,\n          status: i < 4 ? 'emergency' : i < 8 ? 'transfer' : 'available',\n          priority: i < 2 ? 'critical' : i < 6 ? 'high' : 'medium',\n          currentPosition: {\n            lat: route[0].lat + (route[1].lat - route[0].lat) * progress,\n            lng: route[0].lng + (route[1].lng - route[0].lng) * progress\n          },\n          route: route,\n          destination: route[1],\n          eta: Math.floor(Math.random() * 20) + 5,\n          patientCondition: i < 4 ? 'critical' : i < 8 ? 'stable' : null\n        };\n      });\n      \n      res.json(ambulances);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch ambulance tracking\" });\n    }\n  });\n\n  // Hospital detailed simulation data endpoint\n  app.get(\"/api/hospital-simulation/:id\", async (req, res) => {\n    try {\n      const hospitalId = req.params.id;\n      \n      const simulation = {\n        id: hospitalId,\n        realTimeData: {\n          bedUsage: {\n            total: 150,\n            occupied: Math.floor(Math.random() * 50) + 80,\n            available: Math.floor(Math.random() * 30) + 20,\n            reserved: Math.floor(Math.random() * 15) + 5\n          },\n          icuStatus: {\n            total: 25,\n            occupied: Math.floor(Math.random() * 10) + 15,\n            ventilators: {\n              total: 20,\n              inUse: Math.floor(Math.random() * 8) + 10,\n              available: Math.floor(Math.random() * 5) + 2\n            }\n          },\n          staffWorkload: {\n            doctors: { current: 12, required: 15, workload: 85 },\n            nurses: { current: 45, required: 50, workload: 92 },\n            technicians: { current: 20, required: 18, workload: 70 }\n          },\n          emergencyQueue: {\n            waiting: Math.floor(Math.random() * 15) + 5,\n            avgWaitTime: Math.floor(Math.random() * 30) + 15,\n            priority: {\n              critical: Math.floor(Math.random() * 3) + 1,\n              high: Math.floor(Math.random() * 5) + 2,\n              medium: Math.floor(Math.random() * 8) + 3\n            }\n          }\n        },\n        predictions: {\n          nextHourInflow: Math.floor(Math.random() * 20) + 15,\n          surgeProbability: Math.floor(Math.random() * 40) + 30,\n          resourceNeeds: {\n            additionalBeds: Math.floor(Math.random() * 10) + 2,\n            extraStaff: Math.floor(Math.random() * 5) + 1,\n            supplies: ['Oxygen', 'IV fluids', 'Ventilator circuits']\n          }\n        }\n      };\n      \n      res.json(simulation);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hospital simulation\" });\n    }\n  });\n\n  // Scenario simulation endpoint\n  app.post(\"/api/simulate-scenario\", async (req, res) => {\n    try {\n      const { scenario } = req.body;\n      \n      const simulations = {\n        festival: {\n          increase: '+65%',\n          timeframe: 'Peak in 4-8 hours',\n          staff: { doctors: '+8', nurses: '+16', techs: '+6' },\n          supplies: { oxygen: '40', iv: '200', vents: '5' }\n        },\n        pollution: {\n          increase: '+45%', \n          timeframe: 'Peak in 6-12 hours',\n          staff: { doctors: '+6', nurses: '+12', techs: '+4' },\n          supplies: { oxygen: '25', iv: '150', vents: '3' }\n        },\n        epidemic: {\n          increase: '+120%',\n          timeframe: 'Peak in 2-4 days',\n          staff: { doctors: '+15', nurses: '+30', techs: '+10' },\n          supplies: { oxygen: '80', iv: '400', vents: '12' }\n        }\n      };\n      \n      const result = simulations[scenario as keyof typeof simulations];\n      if (!result) {\n        return res.status(400).json({ error: \"Invalid scenario\" });\n      }\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ error: \"Simulation failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":18546},"server/storage.ts":{"content":"import { type Hospital, type SurgeData, type HealthAdvisory, type AiPrediction, type InsertHospital, type InsertSurgeData, type InsertHealthAdvisory, type InsertAiPrediction } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Hospitals\n  getHospitals(): Promise<Hospital[]>;\n  getHospital(id: string): Promise<Hospital | undefined>;\n  createHospital(hospital: InsertHospital): Promise<Hospital>;\n  updateHospital(id: string, updates: Partial<InsertHospital>): Promise<Hospital | undefined>;\n  \n  // Surge Data\n  getSurgeData(): Promise<SurgeData[]>;\n  getHospitalSurgeData(hospitalId: string): Promise<SurgeData[]>;\n  createSurgeData(data: InsertSurgeData): Promise<SurgeData>;\n  \n  // Health Advisories\n  getActiveHealthAdvisories(): Promise<HealthAdvisory[]>;\n  createHealthAdvisory(advisory: InsertHealthAdvisory): Promise<HealthAdvisory>;\n  \n  // AI Predictions\n  getAiPredictions(): Promise<AiPrediction[]>;\n  createAiPrediction(prediction: InsertAiPrediction): Promise<AiPrediction>;\n}\n\nexport class MemStorage implements IStorage {\n  private hospitals: Map<string, Hospital>;\n  private surgeData: Map<string, SurgeData>;\n  private healthAdvisories: Map<string, HealthAdvisory>;\n  private aiPredictions: Map<string, AiPrediction>;\n\n  constructor() {\n    this.hospitals = new Map();\n    this.surgeData = new Map();\n    this.healthAdvisories = new Map();\n    this.aiPredictions = new Map();\n    \n    // Initialize with sample Mumbai hospitals\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    const sampleHospitals: Hospital[] = [\n      {\n        id: \"1\",\n        name: \"Kokilaben Dhirubhai Ambani Hospital\",\n        location: \"Andheri West\",\n        bedsAvailable: 23,\n        icuCapacity: 15,\n        status: \"good\",\n        latitude: \"19.1317\",\n        longitude: \"72.8267\",\n        lastUpdated: new Date(),\n      },\n      {\n        id: \"2\", \n        name: \"Hinduja Hospital\",\n        location: \"Mahim\",\n        bedsAvailable: 7,\n        icuCapacity: 8,\n        status: \"moderate\",\n        latitude: \"19.0401\",\n        longitude: \"72.8397\",\n        lastUpdated: new Date(),\n      },\n      {\n        id: \"3\",\n        name: \"Breach Candy Hospital\",\n        location: \"Breach Candy\",\n        bedsAvailable: 31,\n        icuCapacity: 20,\n        status: \"good\",\n        latitude: \"18.9735\",\n        longitude: \"72.8112\",\n        lastUpdated: new Date(),\n      },\n      {\n        id: \"4\",\n        name: \"Jupiter Hospital\",\n        location: \"Thane\",\n        bedsAvailable: 2,\n        icuCapacity: 3,\n        status: \"critical\",\n        latitude: \"19.2183\",\n        longitude: \"72.9781\",\n        lastUpdated: new Date(),\n      }\n    ];\n\n    const sampleAdvisories: HealthAdvisory[] = [\n      {\n        id: \"1\",\n        type: \"aqi\",\n        message: \"High AQI in Andheri - Current AQI: 312. Avoid outdoor activities. Use N95 masks if necessary.\",\n        severity: \"high\",\n        location: \"Andheri\",\n        isActive: 1,\n        createdAt: new Date(),\n      },\n      {\n        id: \"2\",\n        type: \"temperature\",\n        message: \"Heat Wave Advisory - Temperature expected to reach 42°C. Stay hydrated and avoid sun exposure 11 AM - 4 PM.\",\n        severity: \"medium\",\n        location: \"Mumbai\",\n        isActive: 1,\n        createdAt: new Date(),\n      },\n      {\n        id: \"3\",\n        type: \"medical\",\n        message: \"Asthma patients: Ensure inhaler availability during current air quality conditions.\",\n        severity: \"medium\",\n        location: \"Mumbai\",\n        isActive: 1,\n        createdAt: new Date(),\n      }\n    ];\n\n    const samplePredictions: AiPrediction[] = [\n      {\n        id: \"1\",\n        type: \"surge\",\n        prediction: { increase: \"30%\", timeframe: \"tomorrow\", condition: \"asthma cases\" },\n        confidence: 89,\n        alertLevel: \"medium\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"2\",\n        type: \"staffing\",\n        prediction: { needed: \"4 ER doctors\", timeframe: \"weekend surge\" },\n        confidence: 85,\n        alertLevel: \"medium\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"3\",\n        type: \"supply\",\n        prediction: { item: \"oxygen cylinders\", quantity: \"20\", urgency: \"low supply\" },\n        confidence: 92,\n        alertLevel: \"high\",\n        createdAt: new Date(),\n      }\n    ];\n\n    sampleHospitals.forEach(hospital => this.hospitals.set(hospital.id, hospital));\n    sampleAdvisories.forEach(advisory => this.healthAdvisories.set(advisory.id, advisory));\n    samplePredictions.forEach(prediction => this.aiPredictions.set(prediction.id, prediction));\n  }\n\n  async getHospitals(): Promise<Hospital[]> {\n    return Array.from(this.hospitals.values());\n  }\n\n  async getHospital(id: string): Promise<Hospital | undefined> {\n    return this.hospitals.get(id);\n  }\n\n  async createHospital(insertHospital: InsertHospital): Promise<Hospital> {\n    const id = randomUUID();\n    const hospital: Hospital = { \n      ...insertHospital,\n      id, \n      lastUpdated: new Date(),\n      status: insertHospital.status || \"good\",\n      bedsAvailable: insertHospital.bedsAvailable || 0,\n      icuCapacity: insertHospital.icuCapacity || 0\n    };\n    this.hospitals.set(id, hospital);\n    return hospital;\n  }\n\n  async updateHospital(id: string, updates: Partial<InsertHospital>): Promise<Hospital | undefined> {\n    const hospital = this.hospitals.get(id);\n    if (!hospital) return undefined;\n    \n    const updatedHospital = { \n      ...hospital, \n      ...updates, \n      lastUpdated: new Date() \n    };\n    this.hospitals.set(id, updatedHospital);\n    return updatedHospital;\n  }\n\n  async getSurgeData(): Promise<SurgeData[]> {\n    return Array.from(this.surgeData.values());\n  }\n\n  async getHospitalSurgeData(hospitalId: string): Promise<SurgeData[]> {\n    return Array.from(this.surgeData.values()).filter(data => data.hospitalId === hospitalId);\n  }\n\n  async createSurgeData(insertData: InsertSurgeData): Promise<SurgeData> {\n    const id = randomUUID();\n    const data: SurgeData = { \n      ...insertData,\n      id, \n      timestamp: new Date(),\n      hospitalId: insertData.hospitalId || null\n    };\n    this.surgeData.set(id, data);\n    return data;\n  }\n\n  async getActiveHealthAdvisories(): Promise<HealthAdvisory[]> {\n    return Array.from(this.healthAdvisories.values()).filter(advisory => advisory.isActive === 1);\n  }\n\n  async createHealthAdvisory(insertAdvisory: InsertHealthAdvisory): Promise<HealthAdvisory> {\n    const id = randomUUID();\n    const advisory: HealthAdvisory = { \n      ...insertAdvisory,\n      id, \n      createdAt: new Date(),\n      location: insertAdvisory.location || null,\n      isActive: insertAdvisory.isActive || 1\n    };\n    this.healthAdvisories.set(id, advisory);\n    return advisory;\n  }\n\n  async getAiPredictions(): Promise<AiPrediction[]> {\n    return Array.from(this.aiPredictions.values());\n  }\n\n  async createAiPrediction(insertPrediction: InsertAiPrediction): Promise<AiPrediction> {\n    const id = randomUUID();\n    const prediction: AiPrediction = { \n      ...insertPrediction, \n      id, \n      createdAt: new Date() \n    };\n    this.aiPredictions.set(id, prediction);\n    return prediction;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7246},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const hospitals = pgTable(\"hospitals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  bedsAvailable: integer(\"beds_available\").notNull().default(0),\n  icuCapacity: integer(\"icu_capacity\").notNull().default(0),\n  status: text(\"status\").notNull().default(\"good\"), // good, moderate, critical\n  latitude: text(\"latitude\").notNull(),\n  longitude: text(\"longitude\").notNull(),\n  lastUpdated: timestamp(\"last_updated\").notNull().defaultNow(),\n});\n\nexport const surgeData = pgTable(\"surge_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hospitalId: varchar(\"hospital_id\").references(() => hospitals.id),\n  predictionPercentage: integer(\"prediction_percentage\").notNull(),\n  patientInflow: integer(\"patient_inflow\").notNull(),\n  aiConfidence: integer(\"ai_confidence\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\nexport const healthAdvisories = pgTable(\"health_advisories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // aqi, temperature, medical\n  message: text(\"message\").notNull(),\n  severity: text(\"severity\").notNull(), // low, medium, high, critical\n  location: text(\"location\"),\n  isActive: integer(\"is_active\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const aiPredictions = pgTable(\"ai_predictions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // surge, staffing, supply\n  prediction: jsonb(\"prediction\").notNull(),\n  confidence: integer(\"confidence\").notNull(),\n  alertLevel: text(\"alert_level\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertHospitalSchema = createInsertSchema(hospitals).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertSurgeDataSchema = createInsertSchema(surgeData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertHealthAdvisorySchema = createInsertSchema(healthAdvisories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiPredictionSchema = createInsertSchema(aiPredictions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Hospital = typeof hospitals.$inferSelect;\nexport type InsertHospital = z.infer<typeof insertHospitalSchema>;\nexport type SurgeData = typeof surgeData.$inferSelect;\nexport type InsertSurgeData = z.infer<typeof insertSurgeDataSchema>;\nexport type HealthAdvisory = typeof healthAdvisories.$inferSelect;\nexport type InsertHealthAdvisory = z.infer<typeof insertHealthAdvisorySchema>;\nexport type AiPrediction = typeof aiPredictions.$inferSelect;\nexport type InsertAiPrediction = z.infer<typeof insertAiPredictionSchema>;\n\n// Dashboard Stats Type\nexport interface DashboardStats {\n  nextSurge: string;\n  currentAqi: number;\n  preparednessScore: number;\n  patientInflow: {\n    current: number;\n    emergency: number;\n    icu: number;\n    general: number;\n    outpatient: number;\n  };\n  cityOverview: {\n    totalHospitals: number;\n    availableBeds: number;\n    icuCapacity: number;\n    alertLevel: string;\n  };\n}\n","size_bytes":3380},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Simulator from \"@/pages/simulator\";\nimport Advisory from \"@/pages/advisory\";\nimport Map from \"@/pages/map\";\nimport PatientJourney from \"@/pages/patient-journey\";\nimport ARVision from \"@/pages/ar-vision\";\nimport Social from \"@/pages/social\";\nimport Telemedicine from \"@/pages/telemedicine\";\nimport Profile from \"@/pages/profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute><Dashboard /></ProtectedRoute>\n      </Route>\n      <Route path=\"/simulator\">\n        <ProtectedRoute><Simulator /></ProtectedRoute>\n      </Route>\n      <Route path=\"/advisory\">\n        <ProtectedRoute><Advisory /></ProtectedRoute>\n      </Route>\n      <Route path=\"/map\">\n        <ProtectedRoute><Map /></ProtectedRoute>\n      </Route>\n      <Route path=\"/patient-journey\">\n        <ProtectedRoute><PatientJourney /></ProtectedRoute>\n      </Route>\n      <Route path=\"/ar-vision\">\n        <ProtectedRoute><ARVision /></ProtectedRoute>\n      </Route>\n      <Route path=\"/social\">\n        <ProtectedRoute><Social /></ProtectedRoute>\n      </Route>\n      <Route path=\"/telemedicine\">\n        <ProtectedRoute><Telemedicine /></ProtectedRoute>\n      </Route>\n      <Route path=\"/profile\">\n        <ProtectedRoute><Profile /></ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"dark\">\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":2298},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 47%, 9%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(240, 19%, 16%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(240, 47%, 9%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(193, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(262, 83%, 70%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(217, 91%, 60%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 85.7%, 97.3%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(193, 100%, 50%);\n  --chart-1: hsl(193, 100%, 50%);\n  --chart-2: hsl(158, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  \n  /* Neon Colors */\n  --neon-cyan: hsl(193, 100%, 50%);\n  --neon-purple: hsl(262, 83%, 70%);\n  --neon-blue: hsl(217, 91%, 60%);\n  \n  /* Space Colors */\n  --space-900: hsl(240, 47%, 9%);\n  --space-800: hsl(240, 25%, 16%);\n  --space-700: hsl(213, 43%, 17%);\n  \n  --font-sans: 'Inter', sans-serif;\n  --radius: 1rem;\n}\n\n.dark {\n  --background: hsl(240, 47%, 9%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(240, 19%, 16%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(240, 47%, 9%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(193, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(262, 83%, 70%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(217, 91%, 60%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 85.7%, 97.3%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(193, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    background: linear-gradient(135deg, hsl(240, 47%, 9%) 0%, hsl(240, 25%, 16%) 50%, hsl(213, 43%, 17%) 100%);\n    min-height: 100vh;\n    transition: background 0.3s ease, color 0.3s ease;\n  }\n  \n  body.light {\n    background: linear-gradient(135deg, hsl(0, 0%, 98%) 0%, hsl(220, 13%, 91%) 50%, hsl(210, 16%, 82%) 100%);\n    color: hsl(240, 10%, 3.9%);\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .glass-dark {\n    background: rgba(0, 0, 0, 0.4);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .neon-border {\n    border: 1px solid transparent;\n    background: linear-gradient(45deg, var(--neon-cyan), var(--neon-purple), var(--neon-blue)) padding-box,\n                linear-gradient(45deg, var(--neon-cyan), var(--neon-purple), var(--neon-blue)) border-box;\n  }\n  \n  .gradient-bg {\n    background: linear-gradient(135deg, var(--space-900) 0%, var(--space-800) 50%, var(--space-700) 100%);\n  }\n  \n  .text-glow {\n    text-shadow: 0 0 30px currentColor;\n  }\n  \n  .hover-glow {\n    transition: all 0.3s ease;\n  }\n  \n  .hover-glow:hover {\n    box-shadow: 0 0 30px rgba(0, 217, 255, 0.5);\n    transform: scale(1.02);\n  }\n  \n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar {\n    width: 4px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 10px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: linear-gradient(to bottom, var(--neon-cyan), var(--neon-purple));\n    border-radius: 10px;\n  }\n}\n\n@layer utilities {\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.8s ease-out;\n  }\n  \n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n}\n\n@keyframes pulse-glow {\n  from {\n    box-shadow: 0 0 20px rgba(0, 217, 255, 0.4);\n  }\n  to {\n    box-shadow: 0 0 40px rgba(0, 217, 255, 0.8), 0 0 60px rgba(0, 217, 255, 0.4);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(100px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n}\n\n@keyframes glow {\n  from {\n    text-shadow: 0 0 20px currentColor;\n  }\n  to {\n    text-shadow: 0 0 40px currentColor, 0 0 60px currentColor;\n  }\n}\n","size_bytes":4892},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useRef, useState } from \"react\";\nimport GlassCard from \"./glass-card\";\nimport { useAuth } from '@/contexts/AuthContext';\nimport { \n  Activity, AlertTriangle, Users, Package, TrendingUp, TrendingDown, \n  Volume2, VolumeX, Trophy, Medal, Award, Zap, Target, Clock, Brain,\n  ChevronUp, ChevronDown, Siren\n} from \"lucide-react\";\nimport type { DashboardStats, AiPrediction } from \"@shared/schema\";\nimport { \n  LineChart, Line, AreaChart, Area, RadarChart, PolarGrid, PolarAngleAxis, \n  PolarRadiusAxis, Radar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, \n  ComposedChart, Bar\n} from \"recharts\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from \"@/components/ui/chart\";\n\n// Chart configurations\nconst chartConfig = {\n  predicted: { label: \"Predicted\", color: \"hsl(var(--chart-1))\" },\n  confidence: { label: \"Confidence\", color: \"hsl(var(--chart-2))\" },\n  upperBound: { label: \"Upper Bound\", color: \"hsl(var(--chart-3))\" },\n  lowerBound: { label: \"Lower Bound\", color: \"hsl(var(--chart-4))\" }\n};\n\nexport default function AdminDashboard() {\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [criticalAlerts, setCriticalAlerts] = useState<any[]>([]);\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const { currentUser } = useAuth();\n\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard-stats'],\n  });\n\n  const { data: forecast } = useQuery<any[]>({\n    queryKey: ['/api/surge-forecast'],\n  });\n\n  const { data: leaderboard } = useQuery<any[]>({\n    queryKey: ['/api/hospital-leaderboard'],\n  });\n\n  const { data: optimization } = useQuery<any>({\n    queryKey: ['/api/resource-optimization'],\n  });\n\n  const { data: emergencyAlerts } = useQuery<any[]>({\n    queryKey: ['/api/emergency-alerts'],\n    refetchInterval: 5000, // Check for new alerts every 5 seconds\n  });\n\n  // Sound alert system\n  useEffect(() => {\n    if (emergencyAlerts && emergencyAlerts.length > 0 && soundEnabled) {\n      const newCriticalAlerts = emergencyAlerts.filter(\n        (alert: any) => alert.level === 'critical' && alert.soundAlert\n      ) || [];\n      \n      if (newCriticalAlerts.length > criticalAlerts.length) {\n        // Play alert sound for new critical alerts\n        if (audioRef.current) {\n          audioRef.current.play().catch(console.error);\n        }\n        setCriticalAlerts(newCriticalAlerts);\n      }\n    }\n  }, [emergencyAlerts, soundEnabled, criticalAlerts.length]);\n\n  // Radar chart data for hospital performance\n  const radarData = [\n    { metric: 'Efficiency', score: 85, fullMark: 100 },\n    { metric: 'Patient Satisfaction', score: 92, fullMark: 100 },\n    { metric: 'Response Time', score: 78, fullMark: 100 },\n    { metric: 'Resource Usage', score: 88, fullMark: 100 },\n    { metric: 'Safety Score', score: 95, fullMark: 100 },\n    { metric: 'Technology', score: 82, fullMark: 100 }\n  ];\n\n  return (\n    <section id=\"dashboard\" className=\"py-20 px-6\">\n      <div className=\"container mx-auto\">\n        {/* Emergency Alert Audio */}\n        <audio ref={audioRef} preload=\"auto\">\n          <source src=\"data:audio/mpeg;base64,//uQRAAAAWMSLwUIYAAsYkXgQgAOGFkCAwgFAwsJBwmAyCPnGhIAME4AHwgABGpMwQAIEBgIBJ4AJAkJEAAAGAQgQGBgIDA4AAAGAQgQGBgIDA4AAAGAQgQGBgIDA4AAAGAQgQGBgI\" type=\"audio/mpeg\" />\n        </audio>\n\n        {/* Header with Welcome Message and Sound Toggle */}\n        <div className=\"text-center mb-16\" data-testid=\"dashboard-header\">\n          <div className=\"flex justify-between items-start mb-6\">\n            <div className=\"text-left\">\n              <div className=\"text-2xl text-neon-cyan font-semibold mb-2\">\n                Welcome back, {currentUser?.displayName || 'User'}! 🔥\n              </div>\n              <div className=\"text-lg\">\n                <span className=\"text-green-400 font-bold\">System Preparedness: 92%</span>\n                <span className=\"text-gray-400 mx-2\">•</span>\n                <span className=\"text-orange-400\">3 Active Alerts</span>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => setSoundEnabled(!soundEnabled)}\n              className={`p-3 rounded-full glass-dark hover-glow transition-all border ${\n                soundEnabled ? 'text-neon-cyan border-neon-cyan' : 'text-gray-500 border-gray-500'\n              }`}\n              data-testid=\"sound-toggle\"\n            >\n              {soundEnabled ? <Volume2 className=\"w-6 h-6\" /> : <VolumeX className=\"w-6 h-6\" />}\n            </button>\n          </div>\n          \n          <div className=\"flex justify-center items-center mb-4\">\n            <h2 className=\"text-4xl font-bold text-glow\">🧠 AI Command Center</h2>\n          </div>\n          <p className=\"text-xl opacity-80\">Advanced Healthcare Intelligence & Predictive Analytics</p>\n        </div>\n\n        {/* Critical Emergency Alerts Banner */}\n        {emergencyAlerts && emergencyAlerts.filter((alert: any) => alert.level === 'critical').length > 0 && (\n          <div className=\"mb-8\" data-testid=\"critical-alerts-banner\">\n            <GlassCard className=\"border-red-500 border-2 bg-red-900/20 animate-pulse\">\n              <div className=\"flex items-center space-x-4\">\n                <Siren className=\"w-8 h-8 text-red-400 animate-spin\" />\n                <div>\n                  <h3 className=\"text-xl font-bold text-red-400\">CRITICAL ALERT ACTIVE</h3>\n                  <p className=\"text-red-200\">\n                    {emergencyAlerts && emergencyAlerts.filter((alert: any) => alert.level === 'critical')[0]?.message}\n                  </p>\n                </div>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-8\">\n          \n          {/* Left Column - Predictive Analytics */}\n          <div className=\"xl:col-span-2 space-y-8\">\n            \n            {/* 7-Day Surge Forecast with Confidence Intervals */}\n            <GlassCard className=\"hover-glow\" data-testid=\"surge-forecast-card\">\n              <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n                <Brain className=\"w-6 h-6 text-neon-cyan mr-3\" />\n                🔮 AI Surge Prediction Timeline\n              </h3>\n              \n              <div className=\"h-80 w-full\">\n                <ResponsiveContainer>\n                  <ComposedChart data={forecast || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                    <XAxis dataKey=\"day\" stroke=\"#9CA3AF\" />\n                    <YAxis stroke=\"#9CA3AF\" />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'rgba(0,0,0,0.8)', \n                        border: '1px solid #06B6D4',\n                        borderRadius: '8px'\n                      }}\n                    />\n                    \n                    {/* Confidence Interval Area */}\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"upperBound\" \n                      stackId=\"1\"\n                      stroke=\"none\"\n                      fill=\"rgba(6, 182, 212, 0.1)\"\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"lowerBound\" \n                      stackId=\"1\"\n                      stroke=\"none\"\n                      fill=\"rgba(6, 182, 212, 0.1)\"\n                    />\n                    \n                    {/* Main Prediction Line */}\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"predicted\" \n                      stroke=\"#06B6D4\" \n                      strokeWidth={3}\n                      dot={{ fill: '#06B6D4', strokeWidth: 2, r: 6 }}\n                    />\n                    \n                    {/* Confidence Bar */}\n                    <Bar dataKey=\"confidence\" fill=\"#A855F7\" opacity={0.6} />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"mt-4 grid grid-cols-3 gap-4 text-sm\">\n                <div className=\"text-center\">\n                  <div className=\"text-neon-cyan font-bold\">Next 24h</div>\n                  <div className=\"text-orange-400\">Medium Risk</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-neon-purple font-bold\">Avg Confidence</div>\n                  <div className=\"text-green-400\">87%</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-orange-400 font-bold\">Peak Expected</div>\n                  <div className=\"text-red-400\">Day 6-7</div>\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Resource Optimization Engine */}\n            <GlassCard className=\"hover-glow\" data-testid=\"resource-optimization-card\">\n              <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n                <Target className=\"w-6 h-6 text-orange-400 mr-3\" />\n                🎯 AI Resource Optimization\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                \n                {/* Staffing Optimization */}\n                <div>\n                  <h4 className=\"font-bold text-neon-cyan mb-3 flex items-center\">\n                    <Users className=\"w-5 h-5 mr-2\" />\n                    Staffing\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {optimization && optimization.staffing && optimization.staffing.map((item: any, idx: number) => (\n                      <div key={idx} className={`p-3 rounded-lg border-l-4 ${\n                        item.urgency === 'high' ? 'border-red-400 bg-red-900/20' : 'border-yellow-400 bg-yellow-900/20'\n                      }`}>\n                        <div className=\"font-semibold text-sm\">{item.department}</div>\n                        <div className=\"text-xs text-gray-300\">{item.action}</div>\n                        <div className=\"text-xs text-neon-purple mt-1\">{item.impact}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Equipment Optimization */}\n                <div>\n                  <h4 className=\"font-bold text-neon-purple mb-3 flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2\" />\n                    Equipment\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {optimization && optimization.equipment && optimization.equipment.map((item: any, idx: number) => (\n                      <div key={idx} className={`p-3 rounded-lg border-l-4 ${\n                        item.urgency === 'critical' ? 'border-red-400 bg-red-900/20' : 'border-orange-400 bg-orange-900/20'\n                      }`}>\n                        <div className=\"font-semibold text-sm\">{item.item}</div>\n                        <div className=\"text-xs text-gray-300\">{item.current} → {item.recommended}</div>\n                        <div className=\"text-xs text-neon-cyan mt-1\">ETA: {item.eta}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Bed Optimization */}\n                <div>\n                  <h4 className=\"font-bold text-green-400 mb-3 flex items-center\">\n                    <Activity className=\"w-5 h-5 mr-2\" />\n                    Beds\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {optimization && optimization.beds && optimization.beds.map((item: any, idx: number) => (\n                      <div key={idx} className=\"p-3 rounded-lg border-l-4 border-green-400 bg-green-900/20\">\n                        <div className=\"font-semibold text-sm\">{item.type} Beds</div>\n                        <div className=\"text-xs text-gray-300\">{item.current}% → {item.recommended}%</div>\n                        <div className=\"text-xs text-green-400 mt-1\">{item.action}</div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </GlassCard>\n\n            {/* Real-time Patient Flow with Multiple Chart Types */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              \n              {/* Line Chart - Patient Inflow Trends */}\n              <GlassCard className=\"hover-glow\" data-testid=\"patient-flow-chart\">\n                <h3 className=\"text-xl font-semibold mb-4 flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 text-neon-cyan mr-2\" />\n                  Patient Flow Trends\n                </h3>\n                \n                <div className=\"h-64 w-full\">\n                  <ResponsiveContainer>\n                    <LineChart data={[\n                      { time: '6AM', emergency: 8, icu: 5, general: 12 },\n                      { time: '9AM', emergency: 15, icu: 8, general: 23 },\n                      { time: '12PM', emergency: 22, icu: 12, general: 31 },\n                      { time: '3PM', emergency: 18, icu: 10, general: 28 },\n                      { time: '6PM', emergency: 25, icu: 15, general: 35 },\n                      { time: '9PM', emergency: 12, icu: 8, general: 20 }\n                    ]}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                      <XAxis dataKey=\"time\" stroke=\"#9CA3AF\" />\n                      <YAxis stroke=\"#9CA3AF\" />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"emergency\" stroke=\"#EF4444\" strokeWidth={2} />\n                      <Line type=\"monotone\" dataKey=\"icu\" stroke=\"#06B6D4\" strokeWidth={2} />\n                      <Line type=\"monotone\" dataKey=\"general\" stroke=\"#A855F7\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </GlassCard>\n\n              {/* Radar Chart - Hospital Performance */}\n              <GlassCard className=\"hover-glow\" data-testid=\"performance-radar\">\n                <h3 className=\"text-xl font-semibold mb-4 flex items-center\">\n                  <Activity className=\"w-5 h-5 text-neon-purple mr-2\" />\n                  Performance Radar\n                </h3>\n                \n                <div className=\"h-64 w-full\">\n                  <ResponsiveContainer>\n                    <RadarChart data={radarData}>\n                      <PolarGrid stroke=\"#374151\" />\n                      <PolarAngleAxis dataKey=\"metric\" tick={{ fontSize: 12, fill: '#9CA3AF' }} />\n                      <PolarRadiusAxis \n                        angle={90} \n                        domain={[0, 100]} \n                        tick={{ fontSize: 10, fill: '#9CA3AF' }}\n                      />\n                      <Radar\n                        name=\"Performance\"\n                        dataKey=\"score\"\n                        stroke=\"#06B6D4\"\n                        fill=\"#06B6D4\"\n                        fillOpacity={0.3}\n                        strokeWidth={2}\n                      />\n                    </RadarChart>\n                  </ResponsiveContainer>\n                </div>\n              </GlassCard>\n            </div>\n          </div>\n\n          {/* Right Column - Hospital Leaderboard & Emergency Alerts */}\n          <div className=\"space-y-8\">\n            \n            {/* Hospital Performance Leaderboard */}\n            <GlassCard className=\"hover-glow\" data-testid=\"hospital-leaderboard\">\n              <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n                <Trophy className=\"w-6 h-6 text-yellow-400 mr-3\" />\n                🏆 Hospital Leaderboard\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {leaderboard && leaderboard.slice(0, 8).map((hospital: any, idx: number) => (\n                  <div key={hospital.id} className={`p-4 rounded-lg ${\n                    idx === 0 ? 'bg-yellow-900/30 border border-yellow-400' :\n                    idx === 1 ? 'bg-gray-800/30 border border-gray-400' :\n                    idx === 2 ? 'bg-orange-900/30 border border-orange-400' :\n                    'bg-gray-800/20'\n                  }`}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 rounded-full bg-neon-cyan/20 flex items-center justify-center text-sm font-bold\">\n                          {idx + 1}\n                        </div>\n                        {idx === 0 && <Trophy className=\"w-5 h-5 text-yellow-400\" />}\n                        {idx === 1 && <Medal className=\"w-5 h-5 text-gray-400\" />}\n                        {idx === 2 && <Award className=\"w-5 h-5 text-orange-400\" />}\n                        <div>\n                          <div className=\"font-semibold text-sm\">{hospital.name}</div>\n                          <div className=\"text-xs text-gray-400\">\n                            Efficiency: {hospital.efficiency}% | Response: {hospital.responseTime}min\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"flex items-center space-x-1\">\n                          <span className=\"text-lg font-bold text-neon-cyan\">{hospital.score}</span>\n                          {hospital.trend === 'up' ? \n                            <ChevronUp className=\"w-4 h-4 text-green-400\" /> :\n                            <ChevronDown className=\"w-4 h-4 text-red-400\" />\n                          }\n                        </div>\n                        <div className=\"text-xs text-gray-400\">Score</div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </GlassCard>\n\n            {/* Emergency Alert System */}\n            <GlassCard className=\"hover-glow\" data-testid=\"emergency-alerts\">\n              <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n                <AlertTriangle className=\"w-6 h-6 text-red-400 mr-3\" />\n                🚨 Emergency Alerts\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {emergencyAlerts && emergencyAlerts.map((alert: any) => (\n                  <div \n                    key={alert.id} \n                    className={`p-4 rounded-lg border-l-4 ${\n                      alert.level === 'critical' ? 'border-red-400 bg-red-900/30 animate-pulse' :\n                      alert.level === 'high' ? 'border-orange-400 bg-orange-900/20' :\n                      'border-yellow-400 bg-yellow-900/20'\n                    }`}\n                    data-testid={`alert-${alert.type}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center mb-2\">\n                          {alert.level === 'critical' && <Siren className=\"w-5 h-5 text-red-400 mr-2 animate-spin\" />}\n                          <span className={`font-bold text-sm ${\n                            alert.level === 'critical' ? 'text-red-400' :\n                            alert.level === 'high' ? 'text-orange-400' :\n                            'text-yellow-400'\n                          }`}>\n                            {alert.type.toUpperCase()} - {alert.level.toUpperCase()}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-200 mb-2\">{alert.message}</p>\n                        <div className=\"text-xs text-gray-400\">\n                          {alert.hospital} • {new Date(alert.timestamp).toLocaleTimeString()}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </GlassCard>\n\n            {/* Real-time Metrics */}\n            <GlassCard className=\"hover-glow\" data-testid=\"realtime-metrics\">\n              <h3 className=\"text-xl font-semibold mb-6 flex items-center\">\n                <Zap className=\"w-5 h-5 text-neon-cyan mr-2\" />\n                Live Metrics\n              </h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Total Patients</span>\n                  <span className=\"text-neon-cyan font-bold\" data-testid=\"total-patients\">\n                    {stats?.patientInflow?.current || 47}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">AQI Level</span>\n                  <span className={`font-bold ${\n                    (stats?.currentAqi || 284) > 200 ? 'text-red-400' : 'text-orange-400'\n                  }`}>\n                    {stats?.currentAqi || 284}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Preparedness</span>\n                  <span className=\"text-green-400 font-bold\">{stats?.preparednessScore || 78}%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm\">Next Surge</span>\n                  <span className=\"text-orange-400 font-bold\">{stats?.nextSurge || '18% Rise'}</span>\n                </div>\n              </div>\n            </GlassCard>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":21866},"client/src/components/ai-chatbot.tsx":{"content":"import { useState } from \"react\";\nimport { Send, Calendar, MapPin, Phone, Clock } from \"lucide-react\";\nimport GlassCard from \"./glass-card\";\n\ninterface Message {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n  actions?: Array<{\n    label: string;\n    action: string;\n  }>;\n}\n\nexport default function AiChatbot() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: \"Hello! I'm your AI health assistant for MumbaiHacks AI Health. I can help with medical advice, hospital booking, and health queries. How can I assist you today?\",\n      isBot: true,\n      timestamp: new Date(),\n      actions: [\n        { label: \"Book Appointment\", action: \"book\" },\n        { label: \"Find Nearest Hospital\", action: \"hospital\" },\n        { label: \"Health Advice\", action: \"advice\" }\n      ]\n    }\n  ]);\n  \n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleActionClick = (action: string) => {\n    let responseText = \"\";\n    let hasActions = false;\n    let actions: Array<{ label: string; action: string }> = [];\n\n    switch (action) {\n      case \"book\":\n        responseText = \"I can help you book an appointment! Here are available options:\";\n        hasActions = true;\n        actions = [\n          { label: \"Emergency (Available Now)\", action: \"emergency\" },\n          { label: \"General Consultation (Today 3 PM)\", action: \"general\" },\n          { label: \"Specialist (Tomorrow 10 AM)\", action: \"specialist\" }\n        ];\n        break;\n      case \"hospital\":\n        responseText = \"Based on your location, here are the nearest hospitals with availability:\";\n        hasActions = true;\n        actions = [\n          { label: \"Kokilaben Hospital (2.3 km) - 23 beds\", action: \"kokilaben\" },\n          { label: \"Hinduja Hospital (3.1 km) - 7 beds\", action: \"hinduja\" },\n          { label: \"Breach Candy (4.2 km) - 31 beds\", action: \"breach\" }\n        ];\n        break;\n      case \"advice\":\n        responseText = \"I can provide health guidance. What's your concern?\";\n        hasActions = true;\n        actions = [\n          { label: \"Fever & Cold\", action: \"fever\" },\n          { label: \"Chest Pain\", action: \"chest\" },\n          { label: \"Breathing Issues\", action: \"breathing\" }\n        ];\n        break;\n      case \"emergency\":\n        responseText = \"🚨 Emergency appointment booked! Dr. Sharma is available now in Emergency Room 201. Estimated wait: 5 minutes. Please arrive immediately.\";\n        break;\n      case \"general\":\n        responseText = \"📅 General consultation booked for today 3:00 PM with Dr. Patel. Room 305. Please arrive 15 minutes early.\";\n        break;\n      case \"specialist\":\n        responseText = \"🩺 Specialist appointment with Dr. Mehta scheduled for tomorrow 10:00 AM. Cardiology Department, Room 412.\";\n        break;\n      case \"fever\":\n        responseText = \"For fever and cold symptoms: 1) Rest and stay hydrated 2) Monitor temperature 3) If fever >101°F for 48+ hours, visit ER 4) Current AQI is high - stay indoors\";\n        break;\n      case \"chest\":\n        responseText = \"⚠️ Chest pain requires immediate attention. I recommend visiting the Emergency Room now. Would you like me to book an emergency appointment?\";\n        hasActions = true;\n        actions = [{ label: \"Book Emergency Now\", action: \"emergency\" }];\n        break;\n      default:\n        responseText = \"I'm here to help with your healthcare needs. Please select an option or ask me anything!\";\n    }\n\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      text: `Action: ${action}`,\n      isBot: false,\n      timestamp: new Date(),\n    };\n\n    const aiResponse: Message = {\n      id: (Date.now() + 1).toString(),\n      text: responseText,\n      isBot: true,\n      timestamp: new Date(),\n      actions: hasActions ? actions : undefined\n    };\n\n    setMessages(prev => [...prev, newMessage, aiResponse]);\n  };\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n    \n    const newMessage: Message = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      isBot: false,\n      timestamp: new Date(),\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    setInputMessage(\"\");\n    setIsTyping(true);\n    \n    // Simulate AI response with medical context\n    setTimeout(() => {\n      const medicalResponses = [\n        \"Based on current health data in Mumbai, I recommend checking AQI levels before outdoor activities. Current AQI: 284 (Poor). Would you like me to find indoor exercise alternatives?\",\n        \"I can help you with that health concern. For accurate diagnosis, I recommend booking a consultation. The nearest available doctor is Dr. Sharma at Kokilaben Hospital.\",\n        \"Your symptoms suggest monitoring is needed. I can schedule a follow-up appointment or connect you with our on-call nurse for immediate guidance.\",\n        \"Based on your location and current hospital capacity, I recommend Breach Candy Hospital (4.2 km away) which has good availability. Would you like me to book an appointment?\"\n      ];\n      \n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: medicalResponses[Math.floor(Math.random() * medicalResponses.length)],\n        isBot: true,\n        timestamp: new Date(),\n        actions: [\n          { label: \"Book Appointment\", action: \"book\" },\n          { label: \"Find Hospital\", action: \"hospital\" }\n        ]\n      };\n      \n      setMessages(prev => [...prev, aiResponse]);\n      setIsTyping(false);\n    }, 2000);\n  };\n\n  return (\n    <GlassCard className=\"hover-glow\" data-testid=\"ai-chatbot\">\n      <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n        <span className=\"w-3 h-3 bg-neon-purple rounded-full mr-3 animate-pulse-glow\"></span>\n        AI Health Assistant\n      </h3>\n\n      {/* Chat Messages */}\n      <div className=\"space-y-4 h-64 overflow-y-auto mb-4 custom-scrollbar\" data-testid=\"chat-messages\">\n        {messages.map((message) => (\n          <div key={message.id} className={`flex items-start ${message.isBot ? '' : 'justify-end'}`}>\n            {message.isBot && (\n              <div className=\"w-8 h-8 bg-gradient-to-r from-neon-purple to-neon-cyan rounded-full flex items-center justify-center mr-3 flex-shrink-0\">\n                <span className=\"text-sm\">🤖</span>\n              </div>\n            )}\n            <div className={`rounded-2xl p-3 max-w-xs animate-slide-up ${\n              message.isBot \n                ? 'glass-dark rounded-tl-none' \n                : 'bg-neon-cyan/20 rounded-tr-none'\n            }`}>\n              <p className=\"text-sm\" data-testid={`message-${message.id}`}>{message.text}</p>\n              \n              {/* Action Buttons */}\n              {message.actions && (\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  {message.actions.map((action, idx) => (\n                    <button\n                      key={idx}\n                      onClick={() => handleActionClick(action.action)}\n                      className=\"text-xs px-3 py-1 bg-neon-cyan/20 hover:bg-neon-cyan/30 rounded-full border border-neon-cyan/30 hover:border-neon-cyan transition-all\"\n                      data-testid={`action-${action.action}`}\n                    >\n                      {action.label}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n\n        {/* AI Typing Indicator */}\n        {isTyping && (\n          <div className=\"flex items-start\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-neon-purple to-neon-cyan rounded-full flex items-center justify-center mr-3 flex-shrink-0\">\n              <span className=\"text-sm\">🤖</span>\n            </div>\n            <div className=\"glass-dark rounded-2xl rounded-tl-none p-3\" data-testid=\"typing-indicator\">\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse\"></div>\n                <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Chat Input */}\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"flex-1 relative\">\n          <input \n            type=\"text\" \n            placeholder=\"Ask about health conditions, symptoms, or advice...\"\n            className=\"w-full glass-dark rounded-full px-6 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-neon-cyan\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            data-testid=\"chat-input\"\n          />\n          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n            <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse-glow\"></div>\n          </div>\n        </div>\n        <button \n          className=\"glass-dark p-3 rounded-full hover-glow neon-border\" \n          onClick={handleSendMessage}\n          data-testid=\"send-message\"\n        >\n          <Send className=\"w-5 h-5 text-neon-cyan\" />\n        </button>\n      </div>\n    </GlassCard>\n  );\n}\n","size_bytes":9459},"client/src/components/glass-card.tsx":{"content":"import { ReactNode, HTMLAttributes } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface GlassCardProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  variant?: \"glass\" | \"glass-dark\";\n}\n\nexport default function GlassCard({ \n  children, \n  className, \n  variant = \"glass\",\n  ...props \n}: GlassCardProps) {\n  return (\n    <div \n      className={cn(\n        \"rounded-2xl p-6\",\n        variant === \"glass\" ? \"glass\" : \"glass-dark\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n","size_bytes":540},"client/src/components/hero-section.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Mic, MicOff, Users, Heart, Shield, Zap, Cloud, Sun, CloudRain, MapPin, Smartphone, Globe, MessageCircle, Fingerprint } from \"lucide-react\";\n\n// Speech Recognition API types\ndeclare global {\n  interface Window {\n    webkitSpeechRecognition: any;\n    SpeechRecognition: any;\n  }\n}\nimport GlassCard from \"./glass-card\";\nimport type { DashboardStats } from \"@shared/schema\";\n\nexport default function HeroSection() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard-stats'],\n  });\n\n  const [livesSaved, setLivesSaved] = useState(1247);\n  const [patientsHelped, setPatientsHelped] = useState(8934);\n  const [isListening, setIsListening] = useState(false);\n  const [currentLanguage, setCurrentLanguage] = useState('english');\n  const [voiceCommand, setVoiceCommand] = useState('');\n  const [isPWAInstallable, setIsPWAInstallable] = useState(false);\n  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [notificationsEnabled, setNotificationsEnabled] = useState(false);\n  const [currentWeather, setCurrentWeather] = useState({\n    temp: 32,\n    condition: \"Sunny\",\n    humidity: 78,\n    icon: <Sun className=\"w-6 h-6\" />\n  });\n\n  // Animate social impact counters\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLivesSaved(prev => prev + Math.floor(Math.random() * 3) + 1);\n      setPatientsHelped(prev => prev + Math.floor(Math.random() * 5) + 2);\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Simulate weather changes\n  useEffect(() => {\n    const weatherConditions = [\n      { temp: 32, condition: \"Sunny\", humidity: 78, icon: <Sun className=\"w-6 h-6 text-orange-400\" /> },\n      { temp: 28, condition: \"Cloudy\", humidity: 82, icon: <Cloud className=\"w-6 h-6 text-gray-400\" /> },\n      { temp: 25, condition: \"Rainy\", humidity: 95, icon: <CloudRain className=\"w-6 h-6 text-blue-400\" /> }\n    ];\n    \n    const interval = setInterval(() => {\n      const randomWeather = weatherConditions[Math.floor(Math.random() * weatherConditions.length)];\n      setCurrentWeather(randomWeather);\n    }, 15000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Enhanced multilingual voice command handler\n  const handleVoiceCommand = () => {\n    if (!isListening) {\n      setIsListening(true);\n      \n      // Check for Web Speech API support\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n        const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n        const recognition = new SpeechRecognition();\n        \n        // Set language based on selection\n        const languageMap = {\n          'english': 'en-IN',\n          'hindi': 'hi-IN', \n          'marathi': 'mr-IN',\n          'gujarati': 'gu-IN'\n        };\n        \n        recognition.lang = languageMap[currentLanguage as keyof typeof languageMap];\n        recognition.interimResults = true;\n        recognition.maxAlternatives = 1;\n        \n        recognition.onresult = (event: any) => {\n          const last = event.results.length - 1;\n          const command = event.results[last][0].transcript.toLowerCase();\n          setVoiceCommand(command);\n          \n          // Enhanced command processing\n          if (command.includes('hospital') || command.includes('हॉस्पिटल') || command.includes('रुग्णालय')) {\n            window.location.href = '/map';\n          } else if (command.includes('emergency') || command.includes('आपातकाल')) {\n            window.location.href = '/dashboard';\n          } else if (command.includes('doctor') || command.includes('डॉक्टर')) {\n            window.location.href = '/advisory';\n          } else if (command.includes('health') || command.includes('आरोग्य')) {\n            window.location.href = '/patient-journey';\n          }\n        };\n        \n        recognition.onerror = () => setIsListening(false);\n        recognition.onend = () => setIsListening(false);\n        \n        recognition.start();\n      } else {\n        // Fallback simulation\n        setTimeout(() => {\n          setIsListening(false);\n          setVoiceCommand('Show nearest hospital');\n          alert(\"Voice command detected: 'Show nearest hospital' - Redirecting to map...\");\n          window.location.href = \"/map\";\n        }, 3000);\n      }\n    }\n  };\n  \n  // PWA Installation handler\n  const handlePWAInstall = () => {\n    if (isPWAInstallable) {\n      // Trigger PWA install prompt\n      alert('Installing MumbaiHacks AI Health as PWA...');\n      setIsPWAInstallable(false);\n    }\n  };\n  \n  // Location services handler\n  const requestLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          alert('Location enabled! Now showing nearby hospitals.');\n        },\n        (error) => {\n          console.error('Location error:', error);\n          alert('Please enable location services for better hospital recommendations.');\n        }\n      );\n    }\n  };\n  \n  // Push notifications handler\n  const enableNotifications = async () => {\n    if ('Notification' in window && 'serviceWorker' in navigator) {\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        setNotificationsEnabled(true);\n        new Notification('MumbaiHacks AI Health', {\n          body: 'You will now receive health alerts and emergency notifications.',\n          icon: '/favicon.ico'\n        });\n      }\n    }\n  };\n\n  return (\n    <section id=\"hero\" className=\"min-h-screen flex items-center justify-center relative pt-20\">\n      {/* Mumbai skyline background */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <img \n          src=\"https://images.unsplash.com/photo-1567157577867-05ccb1388e66?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\" \n          alt=\"Mumbai skyline at night\" \n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      \n      <div className=\"container mx-auto px-6 z-10\">\n        {/* Live Health Metrics Ticker */}\n        <div className=\"fixed top-20 left-0 right-0 z-40 bg-black/20 backdrop-blur-sm border-b border-white/10\" data-testid=\"health-ticker\">\n          <div className=\"container mx-auto px-6 py-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center space-x-8\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-green-400\">System Status: OPERATIONAL</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {currentWeather.icon}\n                  <span>Mumbai: {currentWeather.temp}°C, {currentWeather.condition}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-orange-400 rounded-full animate-pulse\"></div>\n                  <span>AQI Impact: +15% respiratory cases</span>\n                </div>\n              </div>\n              <div className=\"hidden md:block text-neon-purple\">\n                Last updated: {new Date().toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-center animate-slide-up pt-12\" data-testid=\"hero-content\">\n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6 text-glow animate-glow\" data-testid=\"hero-title\">\n            MumbaiHacks AI Health\n          </h1>\n          <h2 className=\"text-3xl md:text-4xl font-light mb-8 text-neon-cyan\" data-testid=\"hero-subtitle\">\n            Future of Healthcare Technology\n          </h2>\n          <p className=\"text-xl mb-8 max-w-3xl mx-auto opacity-90\" data-testid=\"hero-description\">\n            Leveraging artificial intelligence to predict, prepare, and manage patient surges \n            across Mumbai's healthcare network in real-time.\n          </p>\n\n          {/* Enhanced Voice Command Interface */}\n          <div className=\"mb-12\">\n            {/* Language Selector */}\n            <div className=\"flex justify-center mb-4\">\n              <select \n                value={currentLanguage} \n                onChange={(e) => setCurrentLanguage(e.target.value)}\n                className=\"glass-dark px-4 py-2 rounded-full text-sm border border-neon-cyan/30 bg-black/20 text-white\"\n              >\n                <option value=\"english\">English</option>\n                <option value=\"hindi\">हिंदी</option>\n                <option value=\"marathi\">मराठी</option>\n                <option value=\"gujarati\">ગુજરાતી</option>\n              </select>\n            </div>\n            \n            <button\n              onClick={handleVoiceCommand}\n              className={`glass-dark px-6 py-3 rounded-full flex items-center space-x-3 mx-auto hover-glow transition-all ${\n                isListening ? 'animate-pulse-glow border-2 border-neon-cyan' : 'neon-border'\n              }`}\n              data-testid=\"voice-command\"\n            >\n              {isListening ? <MicOff className=\"w-5 h-5 text-neon-cyan animate-pulse\" /> : <Mic className=\"w-5 h-5 text-neon-cyan\" />}\n              <span className=\"text-sm\">\n                {isListening ? \"Listening... (Multilingual)\" : \"🎤 Hey Mumbai Health - Voice Commands\"}\n              </span>\n            </button>\n            \n            {voiceCommand && (\n              <div className=\"mt-3 text-center text-neon-purple text-sm\">\n                Last command: \"{voiceCommand}\"\n              </div>\n            )}\n          </div>\n          \n          {/* Smart Features Row */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-12\">\n            <button \n              onClick={handlePWAInstall}\n              className=\"glass-dark px-4 py-3 rounded-lg hover-glow flex items-center space-x-2 text-sm\"\n            >\n              <Smartphone className=\"w-4 h-4 text-neon-cyan\" />\n              <span>Install App</span>\n            </button>\n            \n            <button \n              onClick={requestLocation}\n              className=\"glass-dark px-4 py-3 rounded-lg hover-glow flex items-center space-x-2 text-sm\"\n            >\n              <MapPin className=\"w-4 h-4 text-green-400\" />\n              <span>{userLocation ? '📍 Located' : 'Enable GPS'}</span>\n            </button>\n            \n            <button \n              onClick={enableNotifications}\n              className=\"glass-dark px-4 py-3 rounded-lg hover-glow flex items-center space-x-2 text-sm\"\n            >\n              <MessageCircle className=\"w-4 h-4 text-orange-400\" />\n              <span>{notificationsEnabled ? '🔔 Active' : 'Notifications'}</span>\n            </button>\n            \n            <button \n              onClick={() => alert('Biometric login will be available in next update!')}\n              className=\"glass-dark px-4 py-3 rounded-lg hover-glow flex items-center space-x-2 text-sm\"\n            >\n              <Fingerprint className=\"w-4 h-4 text-neon-purple\" />\n              <span>Biometric</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Hero Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mt-16\" data-testid=\"hero-stats\">\n          <GlassCard \n            className=\"hover-glow animate-float\" \n            style={{ animationDelay: '0.2s' }}\n            data-testid=\"stat-card-surge\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">Next Surge Prediction</h3>\n              <div className=\"w-3 h-3 bg-neon-cyan rounded-full animate-pulse-glow\"></div>\n            </div>\n            <div className=\"text-3xl font-bold text-neon-cyan mb-2\">\n              {isLoading ? '...' : stats?.nextSurge || '18% Rise'}\n            </div>\n            <p className=\"text-sm opacity-70\">Expected tomorrow 6-8 PM</p>\n            <div className=\"mt-4 text-xs text-neon-purple\">🤖 AI Confidence: 87%</div>\n          </GlassCard>\n\n          <GlassCard \n            className=\"hover-glow animate-float\" \n            style={{ animationDelay: '0.4s' }}\n            data-testid=\"stat-card-aqi\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">Current AQI Mumbai</h3>\n              <div className=\"w-3 h-3 bg-orange-400 rounded-full animate-pulse-glow\"></div>\n            </div>\n            <div className=\"text-3xl font-bold text-orange-400 mb-2\">\n              {isLoading ? '...' : stats?.currentAqi || '284'}\n            </div>\n            <p className=\"text-sm opacity-70\">Poor - Health Advisory Active</p>\n            <div className=\"mt-4 text-xs text-neon-purple\">📍 Worst: Andheri (312)</div>\n          </GlassCard>\n\n          <GlassCard \n            className=\"hover-glow animate-float\" \n            style={{ animationDelay: '0.6s' }}\n            data-testid=\"stat-card-preparedness\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">Preparedness Score</h3>\n              <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse-glow\"></div>\n            </div>\n            <div className=\"text-3xl font-bold text-green-400 mb-2\">\n              {isLoading ? '...' : `${stats?.preparednessScore || '78'}/100`}\n            </div>\n            <p className=\"text-sm opacity-70\">Good - System Ready</p>\n            <div className=\"mt-4 text-xs text-neon-purple\">⚡ Updated 2 min ago</div>\n          </GlassCard>\n        </div>\n\n        {/* Social Impact Counters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-16 mb-16\" data-testid=\"impact-counters\">\n          <GlassCard className=\"text-center hover-glow animate-float\" style={{ animationDelay: '0.1s' }}>\n            <div className=\"flex items-center justify-center mb-3\">\n              <Heart className=\"w-8 h-8 text-red-400 animate-pulse\" />\n            </div>\n            <div className=\"text-3xl font-bold text-red-400 mb-2 animate-glow\" data-testid=\"lives-saved\">\n              {livesSaved.toLocaleString()}\n            </div>\n            <div className=\"text-sm opacity-80\">Lives Saved</div>\n            <div className=\"text-xs text-neon-purple mt-1\">+3 in last hour</div>\n          </GlassCard>\n\n          <GlassCard className=\"text-center hover-glow animate-float\" style={{ animationDelay: '0.2s' }}>\n            <div className=\"flex items-center justify-center mb-3\">\n              <Users className=\"w-8 h-8 text-neon-cyan animate-pulse\" />\n            </div>\n            <div className=\"text-3xl font-bold text-neon-cyan mb-2 animate-glow\" data-testid=\"patients-helped\">\n              {patientsHelped.toLocaleString()}\n            </div>\n            <div className=\"text-sm opacity-80\">Patients Helped</div>\n            <div className=\"text-xs text-neon-purple mt-1\">+12 in last hour</div>\n          </GlassCard>\n\n          <GlassCard className=\"text-center hover-glow animate-float\" style={{ animationDelay: '0.3s' }}>\n            <div className=\"flex items-center justify-center mb-3\">\n              <Shield className=\"w-8 h-8 text-green-400 animate-pulse\" />\n            </div>\n            <div className=\"text-3xl font-bold text-green-400 mb-2 animate-glow\">\n              99.7%\n            </div>\n            <div className=\"text-sm opacity-80\">Uptime</div>\n            <div className=\"text-xs text-neon-purple mt-1\">24/7 monitoring</div>\n          </GlassCard>\n\n          <GlassCard className=\"text-center hover-glow animate-float\" style={{ animationDelay: '0.4s' }}>\n            <div className=\"flex items-center justify-center mb-3\">\n              <Zap className=\"w-8 h-8 text-orange-400 animate-pulse\" />\n            </div>\n            <div className=\"text-3xl font-bold text-orange-400 mb-2 animate-glow\">\n              2.3s\n            </div>\n            <div className=\"text-sm opacity-80\">Response Time</div>\n            <div className=\"text-xs text-neon-purple mt-1\">AI processing</div>\n          </GlassCard>\n        </div>\n\n        {/* Enhanced CTA Section */}\n        <div className=\"text-center space-y-6\">\n          <Link\n            href=\"/dashboard\"\n            className=\"glass-dark px-8 py-4 rounded-full text-lg font-semibold hover-glow neon-border inline-block animate-pulse-glow\"\n            data-testid=\"enter-control-center\"\n          >\n            🚀 Enter AI Control Center →\n          </Link>\n          \n          <div className=\"flex items-center justify-center space-x-8 text-sm opacity-70\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span>47 Hospitals Connected</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse\"></div>\n              <span>Real-time Monitoring</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-neon-purple rounded-full animate-pulse\"></div>\n              <span>AI-Powered Insights</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":17732},"client/src/components/mumbai-map.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport GlassCard from \"./glass-card\";\nimport { \n  MapPin, Layers, Camera, Ambulance, Hospital as HospitalIcon, Waves, AlertTriangle, \n  Activity, Users, BedDouble, Zap, Eye, Navigation, Gauge, TrendingUp,\n  Shield, Clock, Phone, Settings, Volume2, Target\n} from \"lucide-react\";\nimport type { Hospital, DashboardStats } from \"@shared/schema\";\n\ninterface HospitalMarker {\n  id: string;\n  name: string;\n  position: { top: string; left?: string; right?: string };\n  realPosition: { lat: number; lng: number };\n  status: 'good' | 'moderate' | 'critical';\n  beds: number;\n  icu: string;\n  surge: string;\n}\n\ninterface LayerState {\n  hospitalLoad: boolean;\n  pollution: boolean;\n  outbreaks: boolean;\n  ambulances: boolean;\n  surgeZones: boolean;\n  flowLines: boolean;\n}\n\nexport default function MumbaiMap() {\n  const [selectedHospital, setSelectedHospital] = useState<string | null>(null);\n  const [detailsModal, setDetailsModal] = useState<string | null>(null);\n  const [arMode, setArMode] = useState(false);\n  const [qrDetected, setQrDetected] = useState<string | null>(null);\n  const [arNavigation, setArNavigation] = useState<string | null>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [layers, setLayers] = useState<LayerState>({\n    hospitalLoad: true,\n    pollution: false,\n    outbreaks: false,\n    ambulances: true,\n    surgeZones: true,\n    flowLines: true\n  });\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  // Data queries for all the advanced features\n  const { data: hospitals } = useQuery<Hospital[]>({\n    queryKey: ['/api/hospitals'],\n  });\n\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: ['/api/dashboard-stats'],\n  });\n\n  const { data: heatmapData } = useQuery({\n    queryKey: ['/api/map-heatmap'],\n  });\n\n  const { data: surgeZones } = useQuery({\n    queryKey: ['/api/surge-zones'],\n  });\n\n  const { data: hospitalFlows } = useQuery({\n    queryKey: ['/api/hospital-flows'],\n    refetchInterval: 3000, // Update flows every 3 seconds\n  });\n\n  const { data: ambulances } = useQuery({\n    queryKey: ['/api/ambulance-tracking'],\n    refetchInterval: 2000, // Update ambulance positions every 2 seconds\n  });\n\n  const { data: hospitalSimulation } = useQuery({\n    queryKey: ['/api/hospital-simulation', detailsModal],\n    enabled: !!detailsModal,\n  });\n\n  // Hospital markers in extreme corners to avoid overlap\n  const hospitalMarkers: HospitalMarker[] = [\n    {\n      id: '1',\n      name: 'Kokilaben Hospital',\n      position: { top: '10%', left: '5%' },\n      realPosition: { lat: 19.0728, lng: 72.8826 },\n      status: 'good',\n      beds: 23,\n      icu: 'Good',\n      surge: '+12%'\n    },\n    {\n      id: '2',\n      name: 'Hinduja Hospital',\n      position: { top: '10%', right: '5%' },\n      realPosition: { lat: 19.0330, lng: 72.8697 },\n      status: 'moderate',\n      beds: 7,\n      icu: 'Moderate',\n      surge: '+28%'\n    },\n    {\n      id: '3',\n      name: 'Breach Candy Hospital',\n      position: { top: '65%', left: '5%' },\n      realPosition: { lat: 19.0176, lng: 72.8562 },\n      status: 'good',\n      beds: 31,\n      icu: 'Excellent',\n      surge: '+8%'\n    },\n    {\n      id: '4',\n      name: 'Jupiter Hospital',\n      position: { top: '65%', right: '5%' },\n      realPosition: { lat: 19.0456, lng: 72.8735 },\n      status: 'critical',\n      beds: 2,\n      icu: 'Critical',\n      surge: '+45%'\n    }\n  ];\n\n  // AR Mode camera access - no automatic QR detection\n  useEffect(() => {\n    if (arMode) {\n      navigator.mediaDevices.getUserMedia({ \n        video: { facingMode: 'environment' } \n      }).then(stream => {\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      }).catch(() => {\n        // Fallback for demo - keep AR mode but show demo overlay\n        console.log(\"Camera not available - showing demo AR mode\");\n      });\n    }\n    \n    return () => {\n      if (videoRef.current?.srcObject) {\n        const stream = videoRef.current.srcObject as MediaStream;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [arMode]);\n\n  // Handle QR code scanning with loading\n  const startQrScan = () => {\n    setIsScanning(true);\n    \n    // Show loading for 3-4 seconds then simulate QR detection\n    setTimeout(() => {\n      const qrTypes = [\n        'hospital-kokilaben',\n        'department-emergency', \n        'department-icu',\n        'health-tips'\n      ];\n      const randomQR = qrTypes[Math.floor(Math.random() * qrTypes.length)];\n      setIsScanning(false);\n      setQrDetected(randomQR);\n    }, 3500); // 3.5 seconds\n  };\n\n  // Handle QR code actions\n  const handleQrAction = (qrCode: string) => {\n    if (qrCode.startsWith('hospital-')) {\n      const hospitalId = qrCode.split('-')[1];\n      setDetailsModal('1'); // Show hospital details modal\n      setQrDetected(null);\n    } else if (qrCode.startsWith('department-')) {\n      const dept = qrCode.split('-')[1];\n      setArNavigation(dept);\n      setQrDetected(null);\n    } else if (qrCode === 'health-tips') {\n      // Redirect to patient advisory\n      window.open('/advisory', '_blank');\n      setQrDetected(null);\n    }\n  };\n\n  // Convert real coordinates to map position\n  const coordToPosition = (lat: number, lng: number) => {\n    // Mumbai bounds: lat 19.0-19.3, lng 72.7-73.0\n    const latPercent = ((lat - 19.0) / 0.3) * 100;\n    const lngPercent = ((lng - 72.7) / 0.3) * 100;\n    return {\n      top: `${Math.max(0, Math.min(100, 100 - latPercent))}%`,\n      left: `${Math.max(0, Math.min(100, lngPercent))}%`\n    };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'good': return 'bg-green-400';\n      case 'moderate': return 'bg-orange-400';\n      case 'critical': return 'bg-red-400';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getStatusTextColor = (status: string) => {\n    switch (status) {\n      case 'good': return 'text-green-400';\n      case 'moderate': return 'text-orange-400';\n      case 'critical': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const toggleLayer = (layerName: keyof LayerState) => {\n    setLayers(prev => ({ ...prev, [layerName]: !prev[layerName] }));\n  };\n\n  return (\n    <section id=\"map\" className=\"py-20 px-6\">\n      <div className=\"container mx-auto\">\n        {/* Futuristic Header */}\n        <div className=\"text-center mb-16\" data-testid=\"map-header\">\n          <h2 className=\"text-5xl font-bold mb-4 text-glow\">🧠 AI Health Command Center</h2>\n          <p className=\"text-xl opacity-80\">Advanced Predictive Intelligence & Emergency Response System</p>\n        </div>\n\n        {/* Fullscreen AR Mode - Outside all containers for true fullscreen */}\n        {arMode && (\n          <div className=\"fixed inset-0 z-[9999] bg-black\">\n            {/* Camera Feed or Demo Background */}\n            <video \n              ref={videoRef} \n              autoPlay \n              playsInline \n              className=\"w-full h-full object-cover\"\n            />\n            \n            {/* Demo fallback background - cleaner, less blurry */}\n            {!videoRef.current?.srcObject && (\n              <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900\">\n                <div className=\"absolute inset-0 opacity-60\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1551190822-a9333d879b1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\" \n                    alt=\"Hospital corridor view\" \n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"absolute inset-0 bg-black/20\"></div>\n              </div>\n            )}\n            \n            {/* AR Overlays */}\n            <div className=\"absolute inset-0\">\n              \n              {/* Top UI Bar */}\n              <div className=\"absolute top-6 left-6 right-6 flex justify-between items-center\">\n                <div className=\"glass-dark rounded-xl p-3 flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-white font-bold\">AR Health Mode</span>\n                  <Camera className=\"w-5 h-5 text-neon-cyan\" />\n                </div>\n                \n                <button\n                  onClick={() => setArMode(false)}\n                  className=\"glass-dark rounded-xl p-3 text-white hover:bg-red-500/20 transition-all\"\n                  data-testid=\"ar-exit-button\"\n                >\n                  ✕\n                </button>\n              </div>\n\n              {/* AR Hospital Markers - Tiny cards in corners */}\n              {hospitalMarkers.map((hospital) => (\n                <div \n                  key={`ar-${hospital.id}`}\n                  className=\"absolute z-20\"\n                  style={{\n                    top: hospital.position.top,\n                    left: hospital.position.left || 'auto',\n                    right: hospital.position.right || 'auto'\n                  }}\n                >\n                  <div className=\"glass-dark rounded-md p-1.5 border border-neon-cyan/50 w-24\">\n                    <div className=\"flex items-center mb-1\">\n                      <HospitalIcon className={`w-2.5 h-2.5 mr-1 ${getStatusTextColor(hospital.status)}`} />\n                      <div className=\"text-white font-bold text-xs truncate\">{hospital.name.split(' ')[0]}</div>\n                    </div>\n                    <div className=\"text-xs space-y-0.5\">\n                      <div className=\"flex justify-between text-gray-300\">\n                        <span>Beds:</span>\n                        <span className={getStatusTextColor(hospital.status)}>{hospital.beds}</span>\n                      </div>\n                      <div className=\"flex justify-between text-gray-300\">\n                        <span>ICU:</span>\n                        <span className={getStatusTextColor(hospital.status)}>{hospital.icu}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n\n              {/* QR Scanner - Main scan button */}\n              <div className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2 z-30\">\n                <button \n                  onClick={startQrScan}\n                  disabled={isScanning}\n                  className=\"glass-dark rounded-full px-6 py-3 border border-neon-purple hover:border-neon-cyan transition-all flex items-center space-x-3 disabled:opacity-50\"\n                >\n                  <div className=\"w-8 h-8 border-2 border-neon-purple rounded-lg flex items-center justify-center animate-pulse\">\n                    <div className=\"text-lg\">📱</div>\n                  </div>\n                  <div className=\"text-white font-bold\">{isScanning ? 'Scanning...' : 'Scan QR Code'}</div>\n                </button>\n              </div>\n\n              {/* QR Scanning Loading Screen */}\n              {isScanning && (\n                <div className=\"absolute inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50\">\n                  <div className=\"glass-dark rounded-2xl p-8 max-w-sm border border-neon-purple animate-slide-up\">\n                    <div className=\"text-center\">\n                      <div className=\"w-24 h-24 mx-auto mb-6 relative\">\n                        <div className=\"absolute inset-0 border-4 border-neon-purple/30 rounded-full\"></div>\n                        <div className=\"absolute inset-0 border-4 border-transparent border-t-neon-purple rounded-full animate-spin\"></div>\n                        <div className=\"absolute inset-4 flex items-center justify-center\">\n                          <div className=\"text-2xl\">🔍</div>\n                        </div>\n                      </div>\n                      <h3 className=\"text-xl font-bold text-neon-purple mb-2\">Scanning QR Code...</h3>\n                      <p className=\"text-gray-300 text-sm\">Hold your device steady</p>\n                      <div className=\"mt-4 flex justify-center space-x-1\">\n                        <div className=\"w-2 h-2 bg-neon-purple rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-neon-purple rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                        <div className=\"w-2 h-2 bg-neon-purple rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* QR Detection Popup - Higher z-index to appear above everything */}\n              {qrDetected && (\n                <div className=\"absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\n                  <div className=\"glass-dark rounded-2xl p-6 max-w-md border border-neon-cyan animate-slide-up\">\n                    <div className=\"text-center mb-6\">\n                      <div className=\"inline-flex items-center justify-center w-16 h-16 bg-neon-cyan rounded-full mb-4 animate-pulse-glow\">\n                        ✓\n                      </div>\n                      <h3 className=\"text-xl font-bold text-neon-cyan mb-2\">QR Code Detected!</h3>\n                      \n                      {qrDetected.startsWith('hospital-') && (\n                        <div>\n                          <p className=\"text-gray-300 mb-4\">Hospital information detected</p>\n                          <button \n                            onClick={() => handleQrAction(qrDetected)}\n                            className=\"w-full p-3 bg-neon-cyan/20 border border-neon-cyan rounded-lg hover:bg-neon-cyan/30 transition-all text-white font-bold\"\n                          >\n                            View Live Hospital Status\n                          </button>\n                        </div>\n                      )}\n                      \n                      {qrDetected.startsWith('department-') && (\n                        <div>\n                          <p className=\"text-gray-300 mb-4\">Department navigation requested</p>\n                          <button \n                            onClick={() => handleQrAction(qrDetected)}\n                            className=\"w-full p-3 bg-green-400/20 border border-green-400 rounded-lg hover:bg-green-400/30 transition-all text-white font-bold\"\n                          >\n                            Start AR Navigation\n                          </button>\n                        </div>\n                      )}\n\n                      {qrDetected === 'health-tips' && (\n                        <div>\n                          <p className=\"text-gray-300 mb-4\">Health advisory information</p>\n                          <button \n                            onClick={() => handleQrAction(qrDetected)}\n                            className=\"w-full p-3 bg-purple-400/20 border border-purple-400 rounded-lg hover:bg-purple-400/30 transition-all text-white font-bold\"\n                          >\n                            Open Patient Advisory\n                          </button>\n                        </div>\n                      )}\n\n                      <button \n                        onClick={() => setQrDetected(null)}\n                        className=\"mt-3 text-gray-400 hover:text-white transition-all text-sm\"\n                      >\n                        Cancel\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* AR Navigation Overlay - Better positioning and z-index */}\n              {arNavigation && (\n                <div className=\"absolute inset-0 flex items-center justify-center z-40\">\n                  <div className=\"glass-dark rounded-2xl p-6 max-w-md border border-green-400\">\n                    <div className=\"text-center\">\n                      <div className=\"text-4xl mb-4\">🧭</div>\n                      <h3 className=\"text-2xl font-bold text-green-400 mb-4\">AR Navigation Active</h3>\n                      <p className=\"text-gray-300 mb-6\">Follow the glowing arrows to reach the {arNavigation.toUpperCase()}</p>\n                      \n                      {/* Simulated AR Direction Arrows */}\n                      <div className=\"relative h-32 mb-6\">\n                        <div className=\"absolute left-1/2 top-0 transform -translate-x-1/2 text-green-400 text-4xl animate-bounce\">↑</div>\n                        <div className=\"absolute left-1/2 top-8 transform -translate-x-1/2 text-green-400 text-3xl animate-bounce\" style={{ animationDelay: '0.2s' }}>↑</div>\n                        <div className=\"absolute left-1/2 top-16 transform -translate-x-1/2 text-green-400 text-2xl animate-bounce\" style={{ animationDelay: '0.4s' }}>↑</div>\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Distance:</span>\n                          <span className=\"text-green-400 font-bold\">47 meters</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">ETA:</span>\n                          <span className=\"text-green-400 font-bold\">2 minutes</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Next Turn:</span>\n                          <span className=\"text-green-400 font-bold\">Right in 15m</span>\n                        </div>\n                      </div>\n\n                      <button \n                        onClick={() => setArNavigation(null)}\n                        className=\"mt-6 w-full p-3 bg-gray-600/20 border border-gray-400 rounded-lg hover:bg-gray-600/30 transition-all text-white\"\n                      >\n                        End Navigation\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n          \n          {/* Layer Controls Panel */}\n          <div className=\"xl:col-span-1 space-y-4\">\n            <GlassCard className=\"hover-glow\" data-testid=\"layer-controls\">\n              <h3 className=\"text-lg font-bold mb-4 flex items-center\">\n                <Layers className=\"w-5 h-5 mr-2 text-neon-cyan\" />\n                Multi-Layer Controls\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <button\n                  onClick={() => toggleLayer('hospitalLoad')}\n                  className={`w-full p-3 rounded-lg flex items-center justify-between transition-all ${\n                    layers.hospitalLoad ? 'bg-neon-cyan/20 border border-neon-cyan' : 'bg-gray-800/50'\n                  }`}\n                  data-testid=\"layer-hospital-load\"\n                >\n                  <div className=\"flex items-center\">\n                    <HospitalIcon className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Hospital Load</span>\n                  </div>\n                  {layers.hospitalLoad && <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse\"></div>}\n                </button>\n\n                <button\n                  onClick={() => toggleLayer('pollution')}\n                  className={`w-full p-3 rounded-lg flex items-center justify-between transition-all ${\n                    layers.pollution ? 'bg-orange-400/20 border border-orange-400' : 'bg-gray-800/50'\n                  }`}\n                  data-testid=\"layer-pollution\"\n                >\n                  <div className=\"flex items-center\">\n                    <Waves className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Pollution/AQI</span>\n                  </div>\n                  {layers.pollution && <div className=\"w-2 h-2 bg-orange-400 rounded-full animate-pulse\"></div>}\n                </button>\n\n                <button\n                  onClick={() => toggleLayer('outbreaks')}\n                  className={`w-full p-3 rounded-lg flex items-center justify-between transition-all ${\n                    layers.outbreaks ? 'bg-red-400/20 border border-red-400' : 'bg-gray-800/50'\n                  }`}\n                  data-testid=\"layer-outbreaks\"\n                >\n                  <div className=\"flex items-center\">\n                    <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Disease Outbreaks</span>\n                  </div>\n                  {layers.outbreaks && <div className=\"w-2 h-2 bg-red-400 rounded-full animate-pulse\"></div>}\n                </button>\n\n                <button\n                  onClick={() => toggleLayer('ambulances')}\n                  className={`w-full p-3 rounded-lg flex items-center justify-between transition-all ${\n                    layers.ambulances ? 'bg-blue-400/20 border border-blue-400' : 'bg-gray-800/50'\n                  }`}\n                  data-testid=\"layer-ambulances\"\n                >\n                  <div className=\"flex items-center\">\n                    <Ambulance className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Live Ambulances</span>\n                  </div>\n                  {layers.ambulances && <div className=\"w-2 h-2 bg-blue-400 rounded-full animate-pulse\"></div>}\n                </button>\n\n                <button\n                  onClick={() => toggleLayer('surgeZones')}\n                  className={`w-full p-3 rounded-lg flex items-center justify-between transition-all ${\n                    layers.surgeZones ? 'bg-purple-400/20 border border-purple-400' : 'bg-gray-800/50'\n                  }`}\n                  data-testid=\"layer-surge-zones\"\n                >\n                  <div className=\"flex items-center\">\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Surge Zones</span>\n                  </div>\n                  {layers.surgeZones && <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-pulse\"></div>}\n                </button>\n\n                <button\n                  onClick={() => toggleLayer('flowLines')}\n                  className={`w-full p-3 rounded-lg flex items-center justify-between transition-all ${\n                    layers.flowLines ? 'bg-green-400/20 border border-green-400' : 'bg-gray-800/50'\n                  }`}\n                  data-testid=\"layer-flow-lines\"\n                >\n                  <div className=\"flex items-center\">\n                    <Activity className=\"w-4 h-4 mr-2\" />\n                    <span className=\"text-sm\">Flow Lines</span>\n                  </div>\n                  {layers.flowLines && <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>}\n                </button>\n              </div>\n\n              {/* AR Mode Toggle */}\n              <div className=\"mt-6 pt-4 border-t border-gray-600\">\n                <button\n                  onClick={() => setArMode(!arMode)}\n                  className={`w-full p-4 rounded-lg flex items-center justify-center space-x-3 transition-all ${\n                    arMode ? 'bg-neon-purple/30 border border-neon-purple animate-pulse-glow' : 'bg-gray-800/50 hover:bg-neon-purple/10'\n                  }`}\n                  data-testid=\"ar-mode-toggle\"\n                >\n                  <Camera className=\"w-5 h-5\" />\n                  <span className=\"font-bold\">{arMode ? 'Exit AR Mode' : 'Enter AR Mode'}</span>\n                </button>\n              </div>\n            </GlassCard>\n\n            {/* Emergency Stats */}\n            <GlassCard className=\"hover-glow\">\n              <h4 className=\"font-bold mb-3 text-neon-cyan flex items-center\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Emergency Status\n              </h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Active Alerts:</span>\n                  <span className=\"text-red-400 font-bold\">3</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Ambulances Active:</span>\n                  <span className=\"text-blue-400 font-bold\">{Array.isArray(ambulances) ? ambulances.filter((a: any) => a.status !== 'available').length : 8}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Response Time:</span>\n                  <span className=\"text-green-400 font-bold\">12 min</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Surge Risk:</span>\n                  <span className=\"text-orange-400 font-bold\">Medium</span>\n                </div>\n              </div>\n            </GlassCard>\n          </div>\n\n          {/* Main Map Display */}\n          <div className=\"xl:col-span-3\">\n            <GlassCard className=\"hover-glow relative\" data-testid=\"map-container\">\n\n              {/* Regular Map View */}\n              {!arMode && (\n                <div className=\"relative bg-space-900 rounded-2xl overflow-hidden h-96 md:h-[700px]\">\n                  \n                  {/* Enhanced Mumbai Background */}\n                  <div className=\"absolute inset-0\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1595658658481-d53d3f999875?ixlib=rb-4.0.3&auto=format&fit=crop&w=1400&h=800\" \n                      alt=\"Mumbai AI Health Command Center\" \n                      className=\"w-full h-full object-cover opacity-30\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-space-900/90 via-space-900/50 to-space-900/70\"></div>\n                    \n                    {/* Futuristic Grid Overlay */}\n                    <div className=\"absolute inset-0 opacity-20\">\n                      <div className=\"w-full h-full bg-gradient-to-br from-neon-cyan/10 to-neon-purple/10\"></div>\n                      <div className=\"absolute inset-0\" style={{\n                        backgroundImage: `\n                          linear-gradient(rgba(6, 182, 212, 0.1) 1px, transparent 1px),\n                          linear-gradient(90deg, rgba(6, 182, 212, 0.1) 1px, transparent 1px)\n                        `,\n                        backgroundSize: '40px 40px'\n                      }}></div>\n                    </div>\n                  </div>\n\n                  {/* AI Heatmap Layers */}\n                  {layers.pollution && Array.isArray(heatmapData?.pollution) && heatmapData.pollution.map((point: any, idx: number) => {\n                    const pos = coordToPosition(point.lat, point.lng);\n                    return (\n                      <div\n                        key={`pollution-${idx}`}\n                        className=\"absolute rounded-full animate-pulse opacity-70\"\n                        style={{\n                          ...pos,\n                          width: `${point.radius * 800}px`,\n                          height: `${point.radius * 800}px`,\n                          background: `radial-gradient(circle, rgba(239, 68, 68, ${point.intensity * 0.6}) 0%, transparent 80%)`,\n                          transform: 'translate(-50%, -50%)',\n                          zIndex: 5\n                        }}\n                      />\n                    );\n                  })}\n\n                  {layers.outbreaks && Array.isArray(heatmapData?.outbreaks) && heatmapData.outbreaks.map((point: any, idx: number) => {\n                    const pos = coordToPosition(point.lat, point.lng);\n                    return (\n                      <div\n                        key={`outbreak-${idx}`}\n                        className=\"absolute rounded-full animate-pulse opacity-50\"\n                        style={{\n                          ...pos,\n                          width: `${point.radius * 900}px`,\n                          height: `${point.radius * 900}px`,\n                          background: `radial-gradient(circle, rgba(147, 51, 234, ${point.intensity * 0.5}) 0%, transparent 85%)`,\n                          transform: 'translate(-50%, -50%)',\n                          zIndex: 6\n                        }}\n                      />\n                    );\n                  })}\n\n                  {/* Predictive Surge Zones */}\n                  {layers.surgeZones && Array.isArray(surgeZones) && surgeZones.map((zone: any) => {\n                    const centerLat = zone.coordinates.reduce((sum: number, coord: any) => sum + coord.lat, 0) / zone.coordinates.length;\n                    const centerLng = zone.coordinates.reduce((sum: number, coord: any) => sum + coord.lng, 0) / zone.coordinates.length;\n                    const pos = coordToPosition(centerLat, centerLng);\n                    \n                    return (\n                      <div\n                        key={zone.id}\n                        className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n                        style={{ ...pos, zIndex: 8 }}\n                      >\n                        <div className={`\n                          w-28 h-28 rounded-full animate-pulse-glow border-3 border-dashed\n                          ${zone.riskLevel === 'high' ? 'border-red-400 bg-red-400/15' : \n                            zone.riskLevel === 'medium' ? 'border-orange-400 bg-orange-400/15' : \n                            'border-yellow-400 bg-yellow-400/15'}\n                        `}>\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <div className=\"text-center\">\n                              <div className=\"text-xs font-bold\">{zone.name}</div>\n                              <div className=\"text-xs\">{zone.surgePrediction}</div>\n                              <div className=\"text-xs opacity-70\">{zone.timeframe}</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n\n                  {/* Hospital Flow Lines */}\n                  {layers.flowLines && Array.isArray(hospitalFlows) && hospitalFlows.map((flow: any, idx: number) => {\n                    const fromPos = coordToPosition(flow.from.lat, flow.from.lng);\n                    const toPos = coordToPosition(flow.to.lat, flow.to.lng);\n                    \n                    return (\n                      <svg\n                        key={`flow-${idx}`}\n                        className=\"absolute inset-0 w-full h-full pointer-events-none\"\n                        style={{ zIndex: 12 }}\n                      >\n                        <defs>\n                          <linearGradient id={`flowGradient-${idx}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                            <stop offset=\"0%\" stopColor={flow.urgency === 'high' ? '#EF4444' : flow.urgency === 'medium' ? '#F59E0B' : '#10B981'} />\n                            <stop offset=\"100%\" stopColor=\"transparent\" />\n                          </linearGradient>\n                        </defs>\n                        <line\n                          x1={fromPos.left}\n                          y1={fromPos.top}\n                          x2={toPos.left}\n                          y2={toPos.top}\n                          stroke={`url(#flowGradient-${idx})`}\n                          strokeWidth=\"3\"\n                          strokeDasharray=\"10,5\"\n                          className=\"animate-pulse\"\n                        />\n                        \n                        {/* Flow Animation */}\n                        <circle\n                          r=\"4\"\n                          fill={flow.urgency === 'high' ? '#EF4444' : flow.urgency === 'medium' ? '#F59E0B' : '#10B981'}\n                          className=\"animate-pulse\"\n                        >\n                          <animateMotion\n                            dur=\"3s\"\n                            repeatCount=\"indefinite\"\n                            path={`M${fromPos.left},${fromPos.top} L${toPos.left},${toPos.top}`}\n                          />\n                        </circle>\n                      </svg>\n                    );\n                  })}\n\n                  {/* Live Ambulance Tracking */}\n                  {layers.ambulances && Array.isArray(ambulances) && ambulances.map((ambulance: any) => {\n                    const pos = coordToPosition(ambulance.currentPosition.lat, ambulance.currentPosition.lng);\n                    \n                    return (\n                      <div\n                        key={ambulance.id}\n                        className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n                        style={{ ...pos, zIndex: 25 }}\n                      >\n                        <div className={`\n                          p-1 rounded-full animate-pulse-glow\n                          ${ambulance.priority === 'critical' ? 'bg-red-500' : \n                            ambulance.priority === 'high' ? 'bg-orange-500' : \n                            'bg-green-500'}\n                        `}>\n                          <Ambulance className=\"w-4 h-4 text-white\" />\n                        </div>\n                        \n                        {ambulance.status === 'emergency' && (\n                          <div className=\"absolute -top-8 -left-6 bg-red-500 text-white px-2 py-1 rounded text-xs animate-bounce\">\n                            {ambulance.eta}min\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n\n                  {/* Enhanced Hospital Markers */}\n                  {hospitalMarkers.map((hospital) => (\n                    <div \n                      key={hospital.id}\n                      className=\"absolute transform -translate-x-1/2 -translate-y-1/2\"\n                      style={{ ...hospital.position, zIndex: 30 }}\n                    >\n                      <div \n                        className=\"relative cursor-pointer group\"\n                        onMouseEnter={() => setSelectedHospital(hospital.id)}\n                        onMouseLeave={() => setSelectedHospital(null)}\n                        onClick={() => setDetailsModal(hospital.id)}\n                        data-testid={`hospital-marker-${hospital.id}`}\n                      >\n                        {/* Pulsing Glow Ring */}\n                        <div className={`absolute inset-0 w-12 h-12 ${getStatusColor(hospital.status).replace('bg-', 'border-')} border-2 rounded-full animate-ping opacity-30`}></div>\n                        \n                        {/* Main Marker */}\n                        <div className={`relative w-8 h-8 ${getStatusColor(hospital.status)} rounded-full animate-pulse-glow group-hover:scale-125 transition-all duration-300 flex items-center justify-center border-2 border-white/50`}>\n                          <HospitalIcon className=\"w-5 h-5 text-white\" />\n                        </div>\n                        \n                        {/* Hover Popup */}\n                        {selectedHospital === hospital.id && (\n                          <div className=\"absolute bottom-12 left-1/2 transform -translate-x-1/2 z-40\">\n                            <GlassCard \n                              variant=\"glass-dark\" \n                              className=\"min-w-64 text-sm animate-slide-up border border-neon-cyan\"\n                              data-testid={`hospital-popup-${hospital.id}`}\n                            >\n                              <div className=\"flex items-center mb-3\">\n                                <HospitalIcon className={`w-5 h-5 mr-2 ${getStatusTextColor(hospital.status)}`} />\n                                <h4 className={`font-semibold ${getStatusTextColor(hospital.status)}`}>\n                                  {hospital.name}\n                                </h4>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-3\">\n                                <div>\n                                  <div className=\"text-xs text-gray-400\">Available Beds</div>\n                                  <div className={`font-bold ${getStatusTextColor(hospital.status)}`}>\n                                    {hospital.beds}\n                                  </div>\n                                </div>\n                                <div>\n                                  <div className=\"text-xs text-gray-400\">ICU Status</div>\n                                  <div className={getStatusTextColor(hospital.status)}>\n                                    {hospital.icu}\n                                  </div>\n                                </div>\n                                <div>\n                                  <div className=\"text-xs text-gray-400\">AI Prediction</div>\n                                  <div className=\"text-neon-cyan font-bold\">{hospital.surge}</div>\n                                </div>\n                                <div>\n                                  <div className=\"text-xs text-gray-400\">Load Status</div>\n                                  <div className={getStatusTextColor(hospital.status)}>\n                                    {hospital.status.toUpperCase()}\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <button \n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setDetailsModal(hospital.id);\n                                }}\n                                className=\"w-full mt-3 p-2 bg-neon-cyan/20 border border-neon-cyan rounded-lg hover:bg-neon-cyan/30 transition-all text-xs font-bold\"\n                              >\n                                Open Live Simulation\n                              </button>\n                            </GlassCard>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n\n                  {/* Enhanced Legend */}\n                  <div className=\"absolute bottom-6 left-6 glass-dark rounded-xl p-4 border border-neon-cyan/30\" data-testid=\"map-legend\">\n                    <h4 className=\"font-semibold mb-3 text-sm text-neon-cyan flex items-center\">\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      Intelligence Layers\n                    </h4>\n                    <div className=\"grid grid-cols-2 gap-3 text-xs\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-green-400 rounded-full mr-2 animate-pulse\"></div>\n                        <span>Good Capacity</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-orange-400 rounded-full mr-2 animate-pulse\"></div>\n                        <span>Moderate Load</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-red-400 rounded-full mr-2 animate-pulse\"></div>\n                        <span>Critical Status</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-blue-400 rounded-full mr-2 animate-pulse\"></div>\n                        <span>Live Ambulances</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Live City Stats */}\n                  <div className=\"absolute top-6 right-6 glass-dark rounded-xl p-4 border border-neon-purple/30\" data-testid=\"city-stats\">\n                    <h4 className=\"font-semibold mb-3 text-sm text-neon-purple flex items-center\">\n                      <Activity className=\"w-4 h-4 mr-2\" />\n                      Live City Metrics\n                    </h4>\n                    <div className=\"space-y-2 text-xs\">\n                      <div className=\"flex justify-between\">\n                        <span>Active Hospitals:</span>\n                        <span className=\"text-neon-cyan font-bold\">{stats?.cityOverview?.totalHospitals || '47'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Available Beds:</span>\n                        <span className=\"text-green-400 font-bold\">{stats?.cityOverview?.availableBeds || '1,247'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>ICU Utilization:</span>\n                        <span className=\"text-orange-400 font-bold\">{stats?.cityOverview?.icuCapacity || '73'}%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>AI Risk Level:</span>\n                        <span className=\"text-red-400 font-bold animate-pulse\">{stats?.cityOverview?.alertLevel || 'Medium'}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Response Time:</span>\n                        <span className=\"text-neon-cyan font-bold\">12 min</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </GlassCard>\n          </div>\n        </div>\n\n        {/* Hospital Simulation Modal */}\n        {detailsModal && hospitalSimulation && hospitalSimulation.realTimeData && (\n          <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n            <GlassCard className=\"max-w-4xl w-full max-h-[90vh] overflow-y-auto border border-neon-cyan\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-neon-cyan flex items-center\">\n                  <Activity className=\"w-6 h-6 mr-3\" />\n                  Live Hospital Simulation\n                </h3>\n                <button \n                  onClick={() => setDetailsModal(null)}\n                  className=\"p-2 hover:bg-red-500/20 rounded-lg transition-all\"\n                >\n                  ✕\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                \n                {/* Bed Usage */}\n                <GlassCard variant=\"glass-dark\" className=\"border border-blue-400/30\">\n                  <h4 className=\"font-bold mb-4 text-blue-400 flex items-center\">\n                    <BedDouble className=\"w-5 h-5 mr-2\" />\n                    Bed Utilization\n                  </h4>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-sm\">Occupied</span>\n                        <span className=\"text-blue-400 font-bold\">{hospitalSimulation?.realTimeData?.bedUsage?.occupied || 0}</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-3\">\n                        <div \n                          className=\"bg-gradient-to-r from-blue-400 to-cyan-400 h-3 rounded-full animate-pulse\"\n                          style={{ width: `${((hospitalSimulation?.realTimeData?.bedUsage?.occupied || 0) / (hospitalSimulation?.realTimeData?.bedUsage?.total || 1)) * 100}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-sm\">Available</span>\n                        <span className=\"text-green-400 font-bold\">{hospitalSimulation?.realTimeData?.bedUsage?.available || 0}</span>\n                      </div>\n                      <div className=\"w-full bg-gray-700 rounded-full h-3\">\n                        <div \n                          className=\"bg-gradient-to-r from-green-400 to-emerald-400 h-3 rounded-full\"\n                          style={{ width: `${((hospitalSimulation?.realTimeData?.bedUsage?.available || 0) / (hospitalSimulation?.realTimeData?.bedUsage?.total || 1)) * 100}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n\n                {/* Staff Workload */}\n                <GlassCard variant=\"glass-dark\" className=\"border border-green-400/30\">\n                  <h4 className=\"font-bold mb-4 text-green-400 flex items-center\">\n                    <Users className=\"w-5 h-5 mr-2\" />\n                    Staff Workload\n                  </h4>\n                  <div className=\"space-y-4\">\n                    {hospitalSimulation?.realTimeData?.staffWorkload && Object.entries(hospitalSimulation.realTimeData.staffWorkload).map(([role, data]: [string, any]) => (\n                      <div key={role}>\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-sm capitalize\">{role}</span>\n                          <span className=\"text-green-400 font-bold\">{data.workload}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full ${data.workload > 90 ? 'bg-red-400' : data.workload > 70 ? 'bg-orange-400' : 'bg-green-400'}`}\n                            style={{ width: `${data.workload}%` }}\n                          ></div>\n                        </div>\n                        <div className=\"text-xs text-gray-400 mt-1\">\n                          {data.current}/{data.required} staff\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </GlassCard>\n\n                {/* Emergency Queue */}\n                <GlassCard variant=\"glass-dark\" className=\"border border-orange-400/30\">\n                  <h4 className=\"font-bold mb-4 text-orange-400 flex items-center\">\n                    <Clock className=\"w-5 h-5 mr-2\" />\n                    Emergency Queue\n                  </h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-orange-400\">{hospitalSimulation?.realTimeData?.emergencyQueue?.waiting || 0}</div>\n                      <div className=\"text-sm text-gray-400\">Patients Waiting</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-red-400\">{hospitalSimulation?.realTimeData?.emergencyQueue?.avgWaitTime || 0}min</div>\n                      <div className=\"text-sm text-gray-400\">Avg Wait Time</div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {hospitalSimulation?.realTimeData?.emergencyQueue?.priority && Object.entries(hospitalSimulation.realTimeData.emergencyQueue.priority).map(([priority, count]: [string, any]) => (\n                        <div key={priority} className=\"flex justify-between text-sm\">\n                          <span className=\"capitalize\">{priority}:</span>\n                          <span className={`font-bold ${priority === 'critical' ? 'text-red-400' : priority === 'high' ? 'text-orange-400' : 'text-yellow-400'}`}>\n                            {count}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </GlassCard>\n              </div>\n\n              {/* AI Predictions */}\n              <div className=\"mt-6\">\n                <GlassCard variant=\"glass-dark\" className=\"border border-purple-400/30\">\n                  <h4 className=\"font-bold mb-4 text-purple-400 flex items-center\">\n                    <TrendingUp className=\"w-5 h-5 mr-2\" />\n                    AI Predictions & Recommendations\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-xl font-bold text-purple-400\">{hospitalSimulation?.predictions?.nextHourInflow || 0}</div>\n                      <div className=\"text-sm text-gray-400\">Next Hour Inflow</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-xl font-bold text-orange-400\">{hospitalSimulation?.predictions?.surgeProbability || 0}%</div>\n                      <div className=\"text-sm text-gray-400\">Surge Probability</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-green-400\">+{hospitalSimulation?.predictions?.resourceNeeds?.extraStaff || 0}</div>\n                      <div className=\"text-sm text-gray-400\">Staff Needed</div>\n                    </div>\n                  </div>\n                </GlassCard>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":49768},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Menu, X, Bell, User, LogOut } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nexport default function Navigation() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [location] = useLocation();\n  const { currentUser, logout } = useAuth();\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  const isActiveRoute = (path: string) => {\n    return location === path;\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error(\"Failed to log out:\", error);\n    }\n  };\n\n  // Mock notifications\n  const notifications = [\n    {\n      id: 1,\n      type: 'alert',\n      message: '⚠️ Surge Alert: 28% rise in respiratory cases',\n      time: '2 mins ago',\n      urgent: true\n    },\n    {\n      id: 2,\n      type: 'system',\n      message: '🤖 AI Model updated with new data',\n      time: '1 hour ago',\n      urgent: false\n    },\n    {\n      id: 3,\n      type: 'health',\n      message: '🌡️ Air Quality Alert: AQI 285 (Very Poor)',\n      time: '3 hours ago',\n      urgent: true\n    }\n  ];\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass p-4\" data-testid=\"navigation\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <div className=\"flex items-center space-x-3\" data-testid=\"brand-logo\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-lg flex items-center justify-center\">\n            <span className=\"text-xl font-bold\">MH</span>\n          </div>\n          <span className=\"text-xl font-bold text-glow\">MumbaiHacks AI Health</span>\n        </div>\n        \n        <div className=\"hidden md:flex items-center space-x-8\" data-testid=\"desktop-menu\">\n          <Link\n            href=\"/\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-home\"\n          >\n            Home\n          </Link>\n          <Link\n            href=\"/dashboard\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/dashboard') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-dashboard\"\n          >\n            Dashboard\n          </Link>\n          <Link\n            href=\"/simulator\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/simulator') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-simulator\"\n          >\n            Simulator\n          </Link>\n          <Link\n            href=\"/advisory\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/advisory') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-advisory\"\n          >\n            Advisory\n          </Link>\n          <Link\n            href=\"/map\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/map') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-map\"\n          >\n            Map\n          </Link>\n          <Link\n            href=\"/patient-journey\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/patient-journey') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-journey\"\n          >\n            Journey\n          </Link>\n          <Link\n            href=\"/ar-vision\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/ar-vision') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-ar\"\n          >\n            AR Vision\n          </Link>\n          <Link\n            href=\"/social\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/social') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-social\"\n          >\n            Community\n          </Link>\n          <Link\n            href=\"/telemedicine\"\n            className={`hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/telemedicine') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"nav-telemedicine\"\n          >\n            Telemedicine\n          </Link>\n          \n          {/* Notifications Bell */}\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowNotifications(!showNotifications)}\n              className=\"relative p-2 hover:text-neon-cyan transition-colors\"\n            >\n              <Bell className=\"w-5 h-5\" />\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-xs font-bold text-white\">3</span>\n              </div>\n            </button>\n            \n            {showNotifications && (\n              <div className=\"absolute right-0 top-full mt-2 w-80 glass-dark border border-neon-cyan/30 rounded-lg p-4 z-50\">\n                <h3 className=\"font-bold text-neon-cyan mb-3\">AI Health Alerts</h3>\n                <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                  {notifications.map(notif => (\n                    <div key={notif.id} className={`p-3 rounded-lg ${\n                      notif.urgent ? 'bg-red-500/10 border border-red-500/30' : 'bg-gray-500/10 border border-gray-500/30'\n                    }`}>\n                      <div className=\"text-sm font-medium\">{notif.message}</div>\n                      <div className=\"text-xs text-gray-400 mt-1\">{notif.time}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* User Profile Dropdown */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-right hidden lg:block\">\n              <div className=\"text-sm font-semibold\">Welcome back,</div>\n              <div className=\"text-xs text-neon-cyan\">{currentUser?.displayName || 'User'}</div>\n            </div>\n            \n            <div className=\"relative group\">\n              <Link href=\"/profile\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-full flex items-center justify-center text-sm font-bold text-white hover:scale-110 transition-transform cursor-pointer\">\n                  {currentUser?.photoURL ? (\n                    <img \n                      src={currentUser.photoURL} \n                      alt=\"Profile\" \n                      className=\"w-full h-full rounded-full object-cover\"\n                    />\n                  ) : (\n                    getInitials(currentUser?.displayName || currentUser?.email || \"User\")\n                  )}\n                </div>\n              </Link>\n              \n              {/* Quick Actions Dropdown */}\n              <div className=\"absolute right-0 top-full mt-2 w-48 glass-dark border border-neon-purple/30 rounded-lg p-3 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all z-50\">\n                <Link href=\"/profile\" className=\"flex items-center space-x-2 p-2 hover:bg-neon-purple/20 rounded-lg transition-all\">\n                  <User className=\"w-4 h-4\" />\n                  <span>Profile</span>\n                </Link>\n                <button \n                  onClick={handleLogout}\n                  className=\"w-full flex items-center space-x-2 p-2 hover:bg-red-500/20 rounded-lg transition-all text-left\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                  <span>Sign Out</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <button \n          className=\"md:hidden text-neon-cyan\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n          data-testid=\"mobile-menu-toggle\"\n        >\n          {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n        </button>\n      </div>\n      \n      {/* Mobile Menu */}\n      {isMenuOpen && (\n        <div className=\"md:hidden absolute top-full left-0 right-0 glass-dark p-6 space-y-4\" data-testid=\"mobile-menu\">\n          <Link\n            href=\"/\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-home\"\n          >\n            Home\n          </Link>\n          <Link\n            href=\"/dashboard\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/dashboard') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-dashboard\"\n          >\n            Dashboard\n          </Link>\n          <Link\n            href=\"/simulator\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/simulator') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-simulator\"\n          >\n            Simulator\n          </Link>\n          <Link\n            href=\"/advisory\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/advisory') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-advisory\"\n          >\n            Advisory\n          </Link>\n          <Link\n            href=\"/map\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/map') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-map\"\n          >\n            Map\n          </Link>\n          <Link\n            href=\"/patient-journey\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/patient-journey') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-journey\"\n          >\n            Patient Journey\n          </Link>\n          <Link\n            href=\"/ar-vision\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/ar-vision') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-ar\"\n          >\n            AR Vision\n          </Link>\n          <Link\n            href=\"/social\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/social') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-social\"\n          >\n            Community\n          </Link>\n          <Link\n            href=\"/telemedicine\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/telemedicine') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-telemedicine\"\n          >\n            Telemedicine\n          </Link>\n          <Link\n            href=\"/profile\"\n            onClick={closeMenu}\n            className={`block hover:text-neon-cyan transition-colors ${\n              isActiveRoute('/profile') ? 'text-neon-cyan' : ''\n            }`}\n            data-testid=\"mobile-nav-profile\"\n          >\n            Profile\n          </Link>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":11744},"client/src/components/patient-advisory.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport GlassCard from \"./glass-card\";\nimport AiChatbot from \"./ai-chatbot\";\nimport { AlertTriangle, Thermometer, Pill, Bell } from \"lucide-react\";\nimport type { HealthAdvisory } from \"@shared/schema\";\n\nexport default function PatientAdvisory() {\n  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);\n\n  const { data: advisories, isLoading } = useQuery<HealthAdvisory[]>({\n    queryKey: ['/api/health-advisories'],\n  });\n\n  const getAdvisoryIcon = (type: string) => {\n    switch (type) {\n      case 'aqi':\n        return <AlertTriangle className=\"w-6 h-6 text-orange-400\" />;\n      case 'temperature':\n        return <Thermometer className=\"w-6 h-6 text-neon-cyan\" />;\n      case 'medical':\n        return <Pill className=\"w-6 h-6 text-green-400\" />;\n      default:\n        return <Bell className=\"w-6 h-6 text-neon-purple\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'high':\n      case 'critical':\n        return 'text-orange-400';\n      case 'medium':\n        return 'text-neon-cyan';\n      case 'low':\n        return 'text-green-400';\n      default:\n        return 'text-white';\n    }\n  };\n\n  return (\n    <section id=\"advisory\" className=\"py-20 px-6\">\n      <div className=\"container mx-auto\">\n        <div className=\"text-center mb-16\" data-testid=\"advisory-header\">\n          <h2 className=\"text-4xl font-bold mb-4 text-glow\">Patient Advisory Portal</h2>\n          <p className=\"text-xl opacity-80\">Real-time health advisories powered by AI analytics</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Live Advisories */}\n          <GlassCard className=\"hover-glow\" data-testid=\"advisories-card\">\n            <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n              <span className=\"w-3 h-3 bg-orange-400 rounded-full mr-3 animate-pulse-glow\"></span>\n              Live Health Advisories\n            </h3>\n            \n            <div className=\"space-y-4 max-h-80 overflow-y-auto custom-scrollbar\" data-testid=\"advisories-list\">\n              {isLoading ? (\n                <div className=\"text-center py-8\">Loading advisories...</div>\n              ) : (\n                advisories?.map((advisory) => (\n                  <GlassCard \n                    key={advisory.id} \n                    variant=\"glass-dark\" \n                    className=\"hover-glow animate-slide-up\"\n                    data-testid={`advisory-${advisory.type}`}\n                  >\n                    <div className=\"flex items-start\">\n                      <div className=\"mr-3 mt-1\">\n                        {getAdvisoryIcon(advisory.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className={`font-semibold mb-1 capitalize ${getSeverityColor(advisory.severity)}`}>\n                          {advisory.type} {advisory.severity === 'high' ? 'Alert' : 'Advisory'}\n                          {advisory.location && ` - ${advisory.location}`}\n                        </div>\n                        <p className=\"text-sm mb-2\">{advisory.message}</p>\n                        <div className=\"text-xs text-neon-purple\">\n                          📍 Updated {new Date(advisory.createdAt).toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                  </GlassCard>\n                ))\n              )}\n            </div>\n\n            {/* Subscription Modal Trigger */}\n            <div className=\"mt-6 text-center\">\n              <button \n                className=\"glass-dark px-6 py-3 rounded-full hover-glow neon-border\"\n                onClick={() => setShowSubscriptionModal(true)}\n                data-testid=\"subscribe-button\"\n              >\n                📱 Subscribe to SMS/Email Alerts\n              </button>\n            </div>\n          </GlassCard>\n\n          {/* AI Chatbot */}\n          <AiChatbot />\n        </div>\n\n        {/* Subscription Modal */}\n        {showSubscriptionModal && (\n          <div \n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\"\n            onClick={() => setShowSubscriptionModal(false)}\n            data-testid=\"subscription-modal\"\n          >\n            <GlassCard \n              className=\"max-w-md mx-4\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <h3 className=\"text-xl font-semibold mb-4\">Subscribe to Health Alerts</h3>\n              <p className=\"text-sm mb-6 opacity-80\">\n                Get real-time notifications about health advisories in your area.\n              </p>\n              <div className=\"space-y-4\">\n                <input \n                  type=\"email\" \n                  placeholder=\"Enter your email\"\n                  className=\"w-full glass-dark rounded-lg px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-neon-cyan\"\n                  data-testid=\"email-input\"\n                />\n                <input \n                  type=\"tel\" \n                  placeholder=\"Enter your phone number\"\n                  className=\"w-full glass-dark rounded-lg px-4 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-neon-cyan\"\n                  data-testid=\"phone-input\"\n                />\n              </div>\n              <div className=\"flex gap-4 mt-6\">\n                <button \n                  className=\"flex-1 glass-dark px-4 py-2 rounded-lg hover-glow\"\n                  onClick={() => setShowSubscriptionModal(false)}\n                  data-testid=\"cancel-subscription\"\n                >\n                  Cancel\n                </button>\n                <button \n                  className=\"flex-1 bg-neon-cyan text-black px-4 py-2 rounded-lg hover-glow font-semibold\"\n                  onClick={() => setShowSubscriptionModal(false)}\n                  data-testid=\"confirm-subscription\"\n                >\n                  Subscribe\n                </button>\n              </div>\n            </GlassCard>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":6185},"client/src/components/scenario-simulator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport GlassCard from \"./glass-card\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, Factory, Worm, Activity, Users, Bed, AlertCircle, TrendingUp, Clock, MapPin, Bell } from \"lucide-react\";\n\ninterface SimulationResult {\n  increase: string;\n  timeframe: string;\n  staff: {\n    doctors: string;\n    nurses: string;\n    techs: string;\n  };\n  supplies: {\n    oxygen: string;\n    iv: string;\n    vents: string;\n  };\n}\n\ninterface LiveMetrics {\n  confidence: number;\n  patientFlow: number;\n  bedOccupancy: number;\n  responseTime: number;\n  criticalAlerts: number;\n}\n\ninterface Notification {\n  id: string;\n  type: 'warning' | 'critical' | 'success';\n  message: string;\n  timestamp: string;\n}\n\nexport default function ScenarioSimulator() {\n  const [selectedScenario, setSelectedScenario] = useState<string>(\"\");\n  const [simulationResult, setSimulationResult] = useState<SimulationResult | null>(null);\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [liveMetrics, setLiveMetrics] = useState<LiveMetrics>({\n    confidence: 87,\n    patientFlow: 245,\n    bedOccupancy: 73,\n    responseTime: 2.4,\n    criticalAlerts: 3\n  });\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [hospitalLayout, setHospitalLayout] = useState({\n    emergency: { occupied: 18, total: 25, status: 'high' },\n    icu: { occupied: 8, total: 12, status: 'critical' },\n    general: { occupied: 142, total: 200, status: 'moderate' },\n    surgery: { occupied: 3, total: 8, status: 'low' }\n  });\n\n  const simulationMutation = useMutation({\n    mutationFn: async (scenario: string) => {\n      const res = await apiRequest(\"POST\", \"/api/simulate-scenario\", { scenario });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setSimulationResult(data);\n    },\n  });\n\n  // Simulate live metrics updates\n  useEffect(() => {\n    if (!isSimulating) return;\n    \n    const interval = setInterval(() => {\n      setLiveMetrics(prev => ({\n        confidence: Math.max(70, Math.min(95, prev.confidence + (Math.random() - 0.5) * 4)),\n        patientFlow: Math.max(200, Math.min(400, prev.patientFlow + (Math.random() - 0.5) * 20)),\n        bedOccupancy: Math.max(60, Math.min(95, prev.bedOccupancy + (Math.random() - 0.5) * 3)),\n        responseTime: Math.max(1.5, Math.min(4.0, prev.responseTime + (Math.random() - 0.5) * 0.3)),\n        criticalAlerts: Math.max(0, Math.min(8, prev.criticalAlerts + Math.floor((Math.random() - 0.7) * 2)))\n      }));\n      \n      // Random notifications\n      if (Math.random() < 0.3) {\n        const messages = [\n          { type: 'warning' as const, message: 'ICU capacity approaching 90%' },\n          { type: 'critical' as const, message: 'Emergency department overcrowded' },\n          { type: 'success' as const, message: 'Additional staff deployed successfully' },\n          { type: 'warning' as const, message: 'Oxygen supply running low in Ward 3' }\n        ];\n        const randomMsg = messages[Math.floor(Math.random() * messages.length)];\n        const newNotification: Notification = {\n          id: Date.now().toString(),\n          ...randomMsg,\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setNotifications(prev => [newNotification, ...prev.slice(0, 4)]);\n      }\n    }, 2000);\n    \n    return () => clearInterval(interval);\n  }, [isSimulating]);\n\n  const handleScenarioSelect = (scenario: string) => {\n    setSelectedScenario(scenario);\n    setIsSimulating(true);\n    simulationMutation.mutate(scenario);\n    \n    // Update hospital layout based on scenario\n    setTimeout(() => {\n      const layouts = {\n        festival: {\n          emergency: { occupied: 22, total: 25, status: 'critical' },\n          icu: { occupied: 10, total: 12, status: 'critical' },\n          general: { occupied: 180, total: 200, status: 'high' },\n          surgery: { occupied: 6, total: 8, status: 'high' }\n        },\n        pollution: {\n          emergency: { occupied: 20, total: 25, status: 'critical' },\n          icu: { occupied: 9, total: 12, status: 'critical' },\n          general: { occupied: 165, total: 200, status: 'high' },\n          surgery: { occupied: 4, total: 8, status: 'moderate' }\n        },\n        epidemic: {\n          emergency: { occupied: 24, total: 25, status: 'critical' },\n          icu: { occupied: 11, total: 12, status: 'critical' },\n          general: { occupied: 195, total: 200, status: 'critical' },\n          surgery: { occupied: 7, total: 8, status: 'high' }\n        }\n      };\n      setHospitalLayout(layouts[scenario as keyof typeof layouts] || layouts.festival);\n    }, 1500);\n  };\n  \n  const getStatusColor = (status: string) => {\n    switch(status) {\n      case 'critical': return 'bg-red-500';\n      case 'high': return 'bg-orange-500';\n      case 'moderate': return 'bg-yellow-500';\n      case 'low': return 'bg-green-500';\n      default: return 'bg-gray-500';\n    }\n  };\n  \n  const getNotificationColor = (type: string) => {\n    switch(type) {\n      case 'critical': return 'border-red-500 text-red-400';\n      case 'warning': return 'border-orange-500 text-orange-400';\n      case 'success': return 'border-green-500 text-green-400';\n      default: return 'border-gray-500 text-gray-400';\n    }\n  };\n\n  return (\n    <section id=\"simulator\" className=\"py-20 px-6\">\n      <div className=\"container mx-auto\">\n        <div className=\"text-center mb-16\" data-testid=\"simulator-header\">\n          <h2 className=\"text-4xl font-bold mb-4 text-glow\">AI Scenario Simulator</h2>\n          <p className=\"text-xl opacity-80\">Test surge management strategies with predictive modeling</p>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Live Analytics Dashboard */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-8\">\n            <GlassCard className=\"text-center p-4\">\n              <Activity className=\"w-6 h-6 mx-auto mb-2 text-neon-cyan\" />\n              <div className=\"text-2xl font-bold text-neon-cyan\">{liveMetrics.confidence}%</div>\n              <div className=\"text-xs opacity-70\">AI Confidence</div>\n            </GlassCard>\n            <GlassCard className=\"text-center p-4\">\n              <TrendingUp className=\"w-6 h-6 mx-auto mb-2 text-green-400\" />\n              <div className=\"text-2xl font-bold text-green-400\">{liveMetrics.patientFlow}</div>\n              <div className=\"text-xs opacity-70\">Patient Flow/hr</div>\n            </GlassCard>\n            <GlassCard className=\"text-center p-4\">\n              <Bed className=\"w-6 h-6 mx-auto mb-2 text-orange-400\" />\n              <div className=\"text-2xl font-bold text-orange-400\">{liveMetrics.bedOccupancy}%</div>\n              <div className=\"text-xs opacity-70\">Bed Occupancy</div>\n            </GlassCard>\n            <GlassCard className=\"text-center p-4\">\n              <Clock className=\"w-6 h-6 mx-auto mb-2 text-purple-400\" />\n              <div className=\"text-2xl font-bold text-purple-400\">{liveMetrics.responseTime}s</div>\n              <div className=\"text-xs opacity-70\">Response Time</div>\n            </GlassCard>\n            <GlassCard className=\"text-center p-4\">\n              <AlertCircle className=\"w-6 h-6 mx-auto mb-2 text-red-400\" />\n              <div className=\"text-2xl font-bold text-red-400\">{liveMetrics.criticalAlerts}</div>\n              <div className=\"text-xs opacity-70\">Critical Alerts</div>\n            </GlassCard>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8\">\n            {/* Scenario Selector */}\n            <div className=\"lg:col-span-2\">\n              <GlassCard className=\"text-center\" data-testid=\"scenario-selector\">\n                <h3 className=\"text-2xl font-semibold mb-6 flex items-center justify-center\">\n                  <MapPin className=\"w-6 h-6 mr-2 text-neon-cyan\" />\n                  Emergency Scenario Simulator\n                </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <button \n                className={`glass-dark rounded-xl p-6 hover-glow neon-border transition-all ${\n                  selectedScenario === 'festival' ? 'bg-neon-cyan/20' : ''\n                }`}\n                onClick={() => handleScenarioSelect('festival')}\n                data-testid=\"scenario-festival\"\n              >\n                <Calendar className=\"w-8 h-8 mx-auto mb-3 text-neon-cyan\" />\n                <div className=\"font-semibold\">Festival Surge</div>\n                <div className=\"text-sm opacity-70 mt-2\">Ganesh Chaturthi weekend</div>\n              </button>\n              \n              <button \n                className={`glass-dark rounded-xl p-6 hover-glow neon-border transition-all ${\n                  selectedScenario === 'pollution' ? 'bg-neon-cyan/20' : ''\n                }`}\n                onClick={() => handleScenarioSelect('pollution')}\n                data-testid=\"scenario-pollution\"\n              >\n                <Factory className=\"w-8 h-8 mx-auto mb-3 text-orange-400\" />\n                <div className=\"font-semibold\">Pollution Spike</div>\n                <div className=\"text-sm opacity-70 mt-2\">AQI {'>'}400 emergency</div>\n              </button>\n              \n              <button \n                className={`glass-dark rounded-xl p-6 hover-glow neon-border transition-all ${\n                  selectedScenario === 'epidemic' ? 'bg-neon-cyan/20' : ''\n                }`}\n                onClick={() => handleScenarioSelect('epidemic')}\n                data-testid=\"scenario-epidemic\"\n              >\n                <Worm className=\"w-8 h-8 mx-auto mb-3 text-red-400\" />\n                <div className=\"font-semibold\">Epidemic</div>\n                <div className=\"text-sm opacity-70 mt-2\">Viral outbreak scenario</div>\n              </button>\n            </div>\n              </GlassCard>\n            </div>\n\n            {/* Live Notifications */}\n            <div>\n              <GlassCard className=\"h-full\">\n                <h4 className=\"font-semibold mb-4 flex items-center\">\n                  <Bell className=\"w-5 h-5 mr-2 text-neon-purple\" />\n                  Live Alerts\n                  {notifications.length > 0 && <span className=\"ml-2 w-2 h-2 bg-red-500 rounded-full animate-pulse\"></span>}\n                </h4>\n                <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                  {notifications.length === 0 ? (\n                    <div className=\"text-center text-gray-400 py-8\">\n                      <AlertCircle className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                      <div className=\"text-sm\">No active alerts</div>\n                      <div className=\"text-xs opacity-70\">System monitoring...</div>\n                    </div>\n                  ) : (\n                    notifications.map((notification) => (\n                      <div \n                        key={notification.id}\n                        className={`glass-dark rounded-lg p-3 border-l-4 ${getNotificationColor(notification.type)} animate-slide-up`}\n                      >\n                        <div className=\"font-semibold text-sm\">{notification.message}</div>\n                        <div className=\"text-xs opacity-70 mt-1\">{notification.timestamp}</div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </GlassCard>\n            </div>\n          </div>\n\n          {/* Interactive Hospital Layout */}\n          <GlassCard className=\"mb-8\">\n            <h3 className=\"text-xl font-semibold mb-6 flex items-center\">\n              <Bed className=\"w-6 h-6 mr-2 text-neon-cyan\" />\n              Real-time Hospital Layout\n              {isSimulating && <span className=\"ml-2 text-xs text-neon-cyan animate-pulse\">● LIVE</span>}\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {Object.entries(hospitalLayout).map(([dept, data]) => (\n                <div key={dept} className=\"glass-dark rounded-lg p-4 relative overflow-hidden\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"font-semibold capitalize\">{dept}</div>\n                    <div className={`w-3 h-3 rounded-full ${getStatusColor(data.status)} animate-pulse`}></div>\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">{data.occupied}/{data.total}</div>\n                  <div className=\"text-xs opacity-70 mb-3\">beds occupied</div>\n                  \n                  {/* Animated bed visualization */}\n                  <div className=\"flex flex-wrap gap-1\">\n                    {Array.from({ length: Math.min(12, data.total) }).map((_, i) => (\n                      <div \n                        key={i}\n                        className={`w-2 h-2 rounded-sm transition-all duration-500 ${\n                          i < data.occupied \n                            ? `${getStatusColor(data.status)} animate-pulse` \n                            : 'bg-gray-600'\n                        }`}\n                        style={{ animationDelay: `${i * 100}ms` }}\n                      ></div>\n                    ))}\n                  </div>\n                  \n                  {/* Occupancy percentage */}\n                  <div className=\"mt-3 text-xs\">\n                    <div className=\"flex justify-between items-center mb-1\">\n                      <span>Occupancy</span>\n                      <span className=\"font-bold\">{Math.round((data.occupied / data.total) * 100)}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-700 rounded-full h-1\">\n                      <div \n                        className={`h-1 rounded-full transition-all duration-1000 ${getStatusColor(data.status)}`}\n                        style={{ width: `${(data.occupied / data.total) * 100}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          {/* Enhanced Simulation Results */}\n          <div \n            className={`grid grid-cols-1 md:grid-cols-3 gap-6 transition-all duration-500 ${\n              simulationResult ? 'opacity-100 animate-slide-up' : 'opacity-50'\n            }`}\n            data-testid=\"simulation-results\"\n          >\n            {/* Prediction Card */}\n            <GlassCard className=\"hover-glow\" data-testid=\"prediction-card\">\n              <h4 className=\"font-semibold mb-4 flex items-center\">\n                <span className=\"text-2xl mr-3\">📈</span>\n                Predicted Patient Increase\n              </h4>\n              <div className=\"relative mb-4 rounded-lg overflow-hidden h-32\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1551076805-e1869033e561?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\" \n                  alt=\"Healthcare data analytics dashboard\" \n                  className=\"w-full h-full object-cover opacity-30\"\n                />\n              </div>\n              <div className=\"text-3xl font-bold text-neon-cyan mb-2\" data-testid=\"increase-percentage\">\n                {simulationResult?.increase || '+45%'}\n              </div>\n              <div className=\"text-sm opacity-70\" data-testid=\"increase-timeframe\">\n                {simulationResult?.timeframe || 'Peak in 6-12 hours'}\n              </div>\n              <div className=\"mt-3 text-xs text-neon-purple\">🤖 ML Model: EpiSurge v2.1</div>\n            </GlassCard>\n\n            {/* Staff Requirements */}\n            <GlassCard className=\"hover-glow\" data-testid=\"staff-card\">\n              <h4 className=\"font-semibold mb-4 flex items-center\">\n                <span className=\"text-2xl mr-3\">👥</span>\n                Staff Needed\n              </h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>ER Doctors</span>\n                  <span className=\"text-neon-cyan font-bold\" data-testid=\"doctors-needed\">\n                    {simulationResult?.staff?.doctors || '+6'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Nurses</span>\n                  <span className=\"text-neon-cyan font-bold\" data-testid=\"nurses-needed\">\n                    {simulationResult?.staff?.nurses || '+12'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Technicians</span>\n                  <span className=\"text-neon-cyan font-bold\" data-testid=\"techs-needed\">\n                    {simulationResult?.staff?.techs || '+4'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"mt-4 text-xs text-neon-purple\">📋 Schedule optimized</div>\n            </GlassCard>\n\n            {/* Supply Requirements */}\n            <GlassCard className=\"hover-glow\" data-testid=\"supplies-card\">\n              <h4 className=\"font-semibold mb-4 flex items-center\">\n                <span className=\"text-2xl mr-3\">📦</span>\n                Supplies Required\n              </h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Oxygen Cylinders</span>\n                  <span className=\"text-orange-400 font-bold\" data-testid=\"oxygen-needed\">\n                    {simulationResult?.supplies?.oxygen || '25'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>IV Bags</span>\n                  <span className=\"text-orange-400 font-bold\" data-testid=\"iv-needed\">\n                    {simulationResult?.supplies?.iv || '150'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Ventilators</span>\n                  <span className=\"text-orange-400 font-bold\" data-testid=\"vents-needed\">\n                    {simulationResult?.supplies?.vents || '3'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"mt-4 text-xs text-neon-purple\">🚚 Auto-order initiated</div>\n            </GlassCard>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":18365},"client/src/components/theme-toggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Sun, Moon } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [isDark, setIsDark] = useState(true);\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDark(savedTheme === 'dark');\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDark]);\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n  };\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"fixed top-24 right-6 z-50 glass-dark p-3 rounded-full hover-glow transition-all\"\n      data-testid=\"theme-toggle\"\n      title={`Switch to ${isDark ? 'light' : 'dark'} mode`}\n    >\n      {isDark ? (\n        <Sun className=\"w-5 h-5 text-orange-400 animate-pulse\" />\n      ) : (\n        <Moon className=\"w-5 h-5 text-neon-purple animate-pulse\" />\n      )}\n    </button>\n  );\n}","size_bytes":1076},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-real-time-data.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n\nexport function useRealTimeData() {\n  const queryClient = useQueryClient();\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    // Simulate real-time data updates every 30 seconds\n    intervalRef.current = setInterval(() => {\n      // Invalidate and refetch dashboard stats\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n      \n      // Invalidate hospitals data\n      queryClient.invalidateQueries({ queryKey: ['/api/hospitals'] });\n      \n      // Invalidate health advisories\n      queryClient.invalidateQueries({ queryKey: ['/api/health-advisories'] });\n      \n      // Add visual feedback for data updates\n      const updateElements = document.querySelectorAll('[data-testid*=\"current-patients\"], [data-testid*=\"preparedness-score\"]');\n      updateElements.forEach(element => {\n        element.classList.add('animate-pulse-glow');\n        setTimeout(() => element.classList.remove('animate-pulse-glow'), 1000);\n      });\n    }, 30000);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [queryClient]);\n\n  return {\n    startRealTimeUpdates: () => {\n      if (!intervalRef.current) {\n        intervalRef.current = setInterval(() => {\n          queryClient.invalidateQueries({ queryKey: ['/api/dashboard-stats'] });\n        }, 30000);\n      }\n    },\n    \n    stopRealTimeUpdates: () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = undefined;\n      }\n    }\n  };\n}\n","size_bytes":1647},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/advisory.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport PatientAdvisory from \"@/components/patient-advisory\";\n\nexport default function Advisory() {\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <PatientAdvisory />\n      </div>\n    </div>\n  );\n}","size_bytes":345},"client/src/pages/ar-vision.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport GlassCard from \"@/components/glass-card\";\nimport { Camera, Navigation as NavigationIcon, Zap, Eye, Smartphone, MapPin, User, Heart, QrCode, Scan, Pill, Building, MessageSquare, Fingerprint, ShoppingCart } from \"lucide-react\";\n\nexport default function ARVision() {\n  const [selectedFeature, setSelectedFeature] = useState<string>(\"navigation\");\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResult, setScanResult] = useState<string>('');\n  const [cameraStream, setCameraStream] = useState<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [symptomChecker, setSymptomChecker] = useState(false);\n\n  // Enhanced AR features with QR scanning, symptom checker, virtual tours, and medicine ID\n  const arFeatures = {\n    navigation: {\n      title: \"AR Hospital Navigation\",\n      description: \"Neon arrows guide patients through complex hospital layouts\",\n      icon: <NavigationIcon className=\"w-6 h-6\" />,\n      color: \"text-neon-cyan\",\n      demo: \"🚶‍♂️ → 📍 Emergency Room (2 mins)\"\n    },\n    qrScanning: {\n      title: \"QR Code Hospital Info\",\n      description: \"Scan QR codes to instantly get detailed hospital information\",\n      icon: <QrCode className=\"w-6 h-6\" />,\n      color: \"text-neon-purple\",\n      demo: \"📱 Scan → 🏥 KEM Hospital | ICU: 12 beds available\"\n    },\n    symptomChecker: {\n      title: \"AR Symptom Checker\",\n      description: \"Point camera at body part for AI-powered symptom guidance\",\n      icon: <Scan className=\"w-6 h-6\" />,\n      color: \"text-green-400\",\n      demo: \"📍 Point at chest → ❤️ Heart rate: Normal | BP: Check recommended\"\n    },\n    medicineId: {\n      title: \"Medicine Identification\",\n      description: \"Scan pills to verify authenticity and get drug information\",\n      icon: <Pill className=\"w-6 h-6\" />,\n      color: \"text-orange-400\",\n      demo: \"💊 Aspirin 325mg | ✅ Authentic | ⚠️ Take with food\"\n    },\n    virtualTours: {\n      title: \"Virtual Hospital Tours\",\n      description: \"Take virtual tours of hospitals before visiting\",\n      icon: <Building className=\"w-6 h-6\" />,\n      color: \"text-pink-400\",\n      demo: \"🏥 360° Tour → Emergency: 2min | ICU: 5min wait\"\n    },\n    vitals: {\n      title: \"Vital Signs Overlay\",\n      description: \"Real-time patient monitoring with AR visualization\",\n      icon: <Heart className=\"w-6 h-6\" />,\n      color: \"text-red-400\",\n      demo: \"💓 HR: 72 | 🌡️ 98.6°F | 💨 O2: 98%\"\n    },\n    identification: {\n      title: \"Biometric Staff ID\",\n      description: \"Instant biometric identification and role verification\",\n      icon: <Fingerprint className=\"w-6 h-6\" />,\n      color: \"text-yellow-400\",\n      demo: \"👨‍⚕️ Dr. Sharma | ✅ Verified | Cardiology Dept\"\n    },\n    alerts: {\n      title: \"Emergency Alerts\",\n      description: \"Critical notifications overlaid in real-time\",\n      icon: <Zap className=\"w-6 h-6\" />,\n      color: \"text-red-500\",\n      demo: \"🚨 Code Blue | Room 304 | 30 seconds ago\"\n    }\n  };\n\n  // Camera and QR scanning functionality\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: { facingMode: 'environment' } \n      });\n      setCameraStream(stream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      setIsScanning(true);\n    } catch (error) {\n      console.error('Camera access denied:', error);\n      alert('Camera access required for AR features. Please enable camera permissions.');\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    setIsScanning(false);\n  };\n\n  const simulateQRScan = () => {\n    // Simulate QR code detection\n    setTimeout(() => {\n      setScanResult('🏥 KEM Hospital | ICU: 12 beds available | Emergency: 5min wait');\n      setTimeout(() => setScanResult(''), 5000);\n    }, 2000);\n  };\n\n  const activateSymptomChecker = () => {\n    setSymptomChecker(true);\n    setTimeout(() => {\n      alert('AI Analysis: Point camera at chest area for heart rate detection');\n      setTimeout(() => {\n        alert('✅ Heart Rate: 72 BPM (Normal) | Recommendation: Regular monitoring');\n        setSymptomChecker(false);\n      }, 3000);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    return () => {\n      // Cleanup camera stream on unmount\n      if (cameraStream) {\n        cameraStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [cameraStream]);\n\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <section className=\"py-20 px-6\">\n          <div className=\"container mx-auto\">\n            <div className=\"text-center mb-16\" data-testid=\"ar-header\">\n              <h2 className=\"text-4xl font-bold mb-4 text-glow\">🔮 Advanced AR Healthcare Suite</h2>\n              <p className=\"text-xl opacity-80 mb-6\">Next-generation augmented reality with QR scanning, symptom detection, and medicine verification</p>\n              \n              {/* AR Control Panel */}\n              <div className=\"flex justify-center space-x-4 mb-8\">\n                <button \n                  onClick={isScanning ? stopCamera : startCamera}\n                  className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                    isScanning ? 'border-2 border-red-400 animate-pulse' : 'border border-neon-cyan'\n                  }`}\n                >\n                  <Camera className=\"w-5 h-5\" />\n                  <span>{isScanning ? 'Stop Camera' : 'Start AR Camera'}</span>\n                </button>\n                \n                <button \n                  onClick={simulateQRScan}\n                  disabled={!isScanning}\n                  className=\"px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 border border-neon-purple disabled:opacity-50\"\n                >\n                  <QrCode className=\"w-5 h-5\" />\n                  <span>Scan QR Code</span>\n                </button>\n                \n                <button \n                  onClick={activateSymptomChecker}\n                  className=\"px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 border border-green-400\"\n                >\n                  <Scan className=\"w-5 h-5\" />\n                  <span>Symptom Check</span>\n                </button>\n              </div>\n              \n              {/* Live scan results */}\n              {scanResult && (\n                <div className=\"mb-6 p-4 glass-dark rounded-lg border border-neon-purple animate-pulse-glow\">\n                  <div className=\"text-neon-purple font-bold mb-2\">📱 QR Scan Result:</div>\n                  <div>{scanResult}</div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Enhanced AR Phone Mockup with Live Camera */}\n              <GlassCard className=\"hover-glow relative overflow-hidden\" data-testid=\"ar-mockup\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-neon-cyan/10 to-neon-purple/10\"></div>\n                \n                {/* Phone Frame */}\n                <div className=\"relative mx-auto max-w-sm\">\n                  <div className=\"bg-black rounded-[3rem] p-4 shadow-2xl\">\n                    <div className=\"bg-space-900 rounded-[2.5rem] p-6 relative overflow-hidden h-96\">\n                      {/* Live Camera View or Static Background */}\n                      <div className=\"absolute inset-0\">\n                        {isScanning && videoRef.current ? (\n                          <video \n                            ref={videoRef}\n                            autoPlay\n                            playsInline\n                            muted\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <>\n                            <img \n                              src=\"https://images.unsplash.com/photo-1504813184591-01572f98c85f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=600\" \n                              alt=\"Hospital corridor view\" \n                              className=\"w-full h-full object-cover opacity-60\"\n                            />\n                            <div className=\"absolute inset-0 bg-gradient-to-t from-space-900/60 to-transparent\"></div>\n                          </>\n                        )}\n                        \n                        {/* QR Code Detection Overlay */}\n                        {isScanning && (\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <div className=\"border-2 border-neon-cyan rounded-lg w-32 h-32 animate-pulse\">\n                              <div className=\"absolute top-0 left-0 w-6 h-6 border-t-2 border-l-2 border-neon-cyan\"></div>\n                              <div className=\"absolute top-0 right-0 w-6 h-6 border-t-2 border-r-2 border-neon-cyan\"></div>\n                              <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-2 border-l-2 border-neon-cyan\"></div>\n                              <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-2 border-r-2 border-neon-cyan\"></div>\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Symptom Checker Overlay */}\n                        {symptomChecker && (\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <div className=\"w-24 h-24 border-2 border-green-400 rounded-full animate-ping\"></div>\n                            <div className=\"absolute text-green-400 text-sm font-bold\">Analyzing...</div>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* AR Overlays */}\n                      <div className=\"relative z-10 h-full\">\n                        {/* Neon Navigation Arrows */}\n                        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                          <div className=\"flex items-center space-x-4 animate-pulse-glow\">\n                            <div className=\"w-8 h-2 bg-neon-cyan rounded-full\"></div>\n                            <div className=\"w-0 h-0 border-l-8 border-l-neon-cyan border-y-4 border-y-transparent\"></div>\n                          </div>\n                        </div>\n                        \n                        {/* AR Info Cards */}\n                        <div className=\"absolute top-4 right-4 glass-dark p-2 rounded-lg text-xs\">\n                          <div className=\"text-neon-cyan\">📍 Emergency Room</div>\n                          <div className=\"text-white/80\">120m ahead</div>\n                        </div>\n                        \n                        <div className=\"absolute bottom-4 left-4 glass-dark p-2 rounded-lg text-xs\">\n                          <div className=\"text-green-400\">🟢 Dr. Available</div>\n                          <div className=\"text-white/80\">Room 203</div>\n                        </div>\n                        \n                        {/* Dynamic Feature Demo */}\n                        <div className=\"absolute bottom-16 left-1/2 transform -translate-x-1/2\">\n                          <div className=\"glass-dark p-3 rounded-xl text-center animate-slide-up\">\n                            <div className={`${arFeatures[selectedFeature as keyof typeof arFeatures].color} mb-1`}>\n                              {arFeatures[selectedFeature as keyof typeof arFeatures].icon}\n                            </div>\n                            <div className=\"text-xs\">\n                              {arFeatures[selectedFeature as keyof typeof arFeatures].demo}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Camera Icon */}\n                <div className=\"absolute top-4 right-4\">\n                  <div className=\"w-12 h-12 bg-neon-cyan/20 rounded-full flex items-center justify-center animate-pulse-glow\">\n                    <Camera className=\"w-6 h-6 text-neon-cyan\" />\n                  </div>\n                </div>\n              </GlassCard>\n\n              {/* AR Features */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n                  <span className=\"w-3 h-3 bg-neon-purple rounded-full mr-3 animate-pulse-glow\"></span>\n                  AR Features\n                </h3>\n                \n                {Object.entries(arFeatures).map(([key, feature]) => (\n                  <GlassCard \n                    key={key}\n                    className={`cursor-pointer transition-all hover-glow ${\n                      selectedFeature === key ? 'border-2 border-current' : ''\n                    }`}\n                    onClick={() => setSelectedFeature(key)}\n                    data-testid={`ar-feature-${key}`}\n                  >\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`${feature.color} p-3 bg-current/20 rounded-lg`}>\n                        {feature.icon}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className={`font-semibold mb-2 ${feature.color}`}>\n                          {feature.title}\n                        </h4>\n                        <p className=\"text-sm opacity-90 mb-2\">\n                          {feature.description}\n                        </p>\n                        <div className=\"text-xs text-neon-purple\">\n                          Demo: {feature.demo}\n                        </div>\n                      </div>\n                      {selectedFeature === key && (\n                        <div className=\"w-3 h-3 bg-neon-cyan rounded-full animate-pulse-glow\"></div>\n                      )}\n                    </div>\n                  </GlassCard>\n                ))}\n              </div>\n            </div>\n\n            {/* Enhanced AR Capabilities Grid */}\n            <div className=\"mt-16\">\n              <h3 className=\"text-3xl font-bold text-center mb-12 text-glow\">🚀 Advanced AR Capabilities</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                \n                {/* QR Code Features */}\n                <GlassCard className=\"hover-glow text-center p-6\">\n                  <QrCode className=\"w-12 h-12 text-neon-purple mx-auto mb-4\" />\n                  <h4 className=\"text-xl font-bold text-neon-purple mb-3\">Smart QR Integration</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>🏥 Hospital Information</div>\n                    <div>🛏️ Bed Availability</div>\n                    <div>👨‍⚕️ Doctor Schedules</div>\n                    <div>💊 Pharmacy Stock</div>\n                  </div>\n                </GlassCard>\n                \n                {/* Biometric Features */}\n                <GlassCard className=\"hover-glow text-center p-6\">\n                  <Fingerprint className=\"w-12 h-12 text-yellow-400 mx-auto mb-4\" />\n                  <h4 className=\"text-xl font-bold text-yellow-400 mb-3\">Biometric Security</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>👆 Fingerprint Login</div>\n                    <div>👁️ Face ID Verification</div>\n                    <div>🎤 Voice Authentication</div>\n                    <div>🔐 Multi-Factor Auth</div>\n                  </div>\n                </GlassCard>\n                \n                {/* Virtual Tours */}\n                <GlassCard className=\"hover-glow text-center p-6\">\n                  <Building className=\"w-12 h-12 text-pink-400 mx-auto mb-4\" />\n                  <h4 className=\"text-xl font-bold text-pink-400 mb-3\">Virtual Hospital Tours</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>🏥 360° Hospital Views</div>\n                    <div>🚪 Department Walkthroughs</div>\n                    <div>⏱️ Wait Time Previews</div>\n                    <div>📍 Interactive Floor Maps</div>\n                  </div>\n                </GlassCard>\n                \n              </div>\n            </div>\n            \n            {/* AR Implementation Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-8\" data-testid=\"ar-stats\">\n              <GlassCard className=\"text-center hover-glow\">\n                <Eye className=\"w-8 h-8 text-neon-cyan mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-neon-cyan mb-2\">95%</div>\n                <div className=\"text-sm opacity-80\">Navigation Accuracy</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <Smartphone className=\"w-8 h-8 text-neon-purple mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-neon-purple mb-2\">0.2s</div>\n                <div className=\"text-sm opacity-80\">Response Time</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <MapPin className=\"w-8 h-8 text-green-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-green-400 mb-2\">50+</div>\n                <div className=\"text-sm opacity-80\">Mapped Locations</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <Zap className=\"w-8 h-8 text-orange-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-orange-400 mb-2\">24/7</div>\n                <div className=\"text-sm opacity-80\">Live Tracking</div>\n              </GlassCard>\n            </div>\n\n            {/* Medicine Verification & AR Shopping */}\n            <div className=\"mt-16\">\n              <GlassCard className=\"hover-glow\" data-testid=\"ar-medicine\">\n                <h3 className=\"text-2xl font-semibold mb-8 text-center flex items-center justify-center\">\n                  <Pill className=\"w-8 h-8 text-orange-400 mr-3\" />\n                  Medicine ID & Verification\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  <div>\n                    <h4 className=\"text-lg font-bold text-orange-400 mb-4\">Scan & Verify Features:</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-orange-400 rounded-full\"></div>\n                        <span>💊 Pill identification & authenticity check</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-orange-400 rounded-full\"></div>\n                        <span>⚠️ Drug interaction warnings</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-orange-400 rounded-full\"></div>\n                        <span>📅 Expiration date alerts</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-orange-400 rounded-full\"></div>\n                        <span>📋 Dosage recommendations</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"text-lg font-bold text-neon-cyan mb-4\">AR Shopping Integration:</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <ShoppingCart className=\"w-5 h-5 text-neon-cyan\" />\n                        <span>🏪 Nearby pharmacy finder</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <MapPin className=\"w-5 h-5 text-neon-cyan\" />\n                        <span>📍 Medicine availability tracker</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Smartphone className=\"w-5 h-5 text-neon-cyan\" />\n                        <span>💰 Price comparison tools</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </GlassCard>\n            </div>\n            \n            {/* Future Vision */}\n            <div className=\"mt-16\">\n              <GlassCard className=\"hover-glow\" data-testid=\"ar-future\">\n                <h3 className=\"text-2xl font-semibold mb-6 text-center\">\n                  🌟 Next-Gen AR Healthcare Vision\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <div className=\"text-center p-4\">\n                    <div className=\"text-4xl mb-3\">🔬</div>\n                    <h4 className=\"font-semibold text-neon-cyan mb-2\">AI Surgical Guidance</h4>\n                    <p className=\"text-xs opacity-80\">AR-assisted precision surgery with real-time neural networks</p>\n                  </div>\n                  <div className=\"text-center p-4\">\n                    <div className=\"text-4xl mb-3\">🧬</div>\n                    <h4 className=\"font-semibold text-green-400 mb-2\">DNA Visualization</h4>\n                    <p className=\"text-xs opacity-80\">3D genetic data visualization for personalized medicine</p>\n                  </div>\n                  <div className=\"text-center p-4\">\n                    <div className=\"text-4xl mb-3\">🤖</div>\n                    <h4 className=\"font-semibold text-neon-purple mb-2\">AI Diagnosis</h4>\n                    <p className=\"text-xs opacity-80\">Real-time symptom analysis with 95%+ accuracy</p>\n                  </div>\n                  <div className=\"text-center p-4\">\n                    <div className=\"text-4xl mb-3\">🌐</div>\n                    <h4 className=\"font-semibold text-pink-400 mb-2\">Global Health Network</h4>\n                    <p className=\"text-xs opacity-80\">Connected AR experiences across global healthcare systems</p>\n                  </div>\n                </div>\n              </GlassCard>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":22993},"client/src/pages/dashboard.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport AdminDashboard from \"@/components/admin-dashboard\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <AdminDashboard />\n      </div>\n    </div>\n  );\n}","size_bytes":343},"client/src/pages/home.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport HeroSection from \"@/components/hero-section\";\nimport ThemeToggle from \"@/components/theme-toggle\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen gradient-bg text-white dark:text-white overflow-x-hidden\">\n      <Navigation />\n      <ThemeToggle />\n      <HeroSection />\n      \n      {/* Enhanced Footer */}\n      <footer className=\"py-16 px-6 border-t border-white/10 relative overflow-hidden\">\n        {/* Animated background elements */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-0 left-0 w-32 h-32 bg-neon-cyan rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-0 right-0 w-40 h-40 bg-neon-purple rounded-full blur-3xl animate-pulse\" style={{animationDelay: '1s'}}></div>\n        </div>\n        \n        <div className=\"container mx-auto text-center relative\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-lg flex items-center justify-center mr-4 animate-pulse-glow\">\n              <span className=\"text-2xl font-bold\">MH</span>\n            </div>\n            <span className=\"text-2xl font-bold text-glow\">MumbaiHacks AI Health</span>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n            <div>\n              <h3 className=\"font-semibold text-neon-cyan mb-3\">Quick Access</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"hover:text-neon-cyan cursor-pointer transition-colors\">Emergency Booking</div>\n                <div className=\"hover:text-neon-cyan cursor-pointer transition-colors\">Find Hospitals</div>\n                <div className=\"hover:text-neon-cyan cursor-pointer transition-colors\">Health Advisor</div>\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-neon-purple mb-3\">Live Stats</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Active Users:</span>\n                  <span className=\"text-green-400\">2,847</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Hospitals Online:</span>\n                  <span className=\"text-neon-cyan\">47/47</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Response Time:</span>\n                  <span className=\"text-orange-400\">2.3s</span>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-neon-blue mb-3\">Connect</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"hover:text-neon-blue cursor-pointer transition-colors\">📧 support@mumbaihacks.ai</div>\n                <div className=\"hover:text-neon-blue cursor-pointer transition-colors\">📱 +91 98765 43210</div>\n                <div className=\"hover:text-neon-blue cursor-pointer transition-colors\">🔔 Emergency Hotline</div>\n              </div>\n            </div>\n          </div>\n          \n          <p className=\"text-lg mb-4\">AI-Powered Healthcare Revolution for Mumbai</p>\n          <p className=\"opacity-70 mb-6\">Built with ❤️ for healthcare heroes. Powered by cutting-edge artificial intelligence.</p>\n          \n          <div className=\"flex flex-wrap items-center justify-center gap-6 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-green-400\">All AI agents operational</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-neon-cyan rounded-full animate-pulse\"></div>\n              <span>API Response: 99.9% uptime</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-neon-purple rounded-full animate-pulse\"></div>\n              <span>Last Updated: {new Date().toLocaleTimeString()}</span>\n            </div>\n          </div>\n          \n          <div className=\"mt-8 pt-6 border-t border-white/10 text-xs opacity-60\">\n            © 2024 MumbaiHacks AI Health. Revolutionizing healthcare through technology. \n            <br />\n            <span className=\"text-neon-cyan\">Hackathon Project</span> • <span className=\"text-neon-purple\">Demo Version</span> • <span className=\"text-green-400\">Open Source</span>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":4777},"client/src/pages/map.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport MumbaiMap from \"@/components/mumbai-map\";\n\nexport default function Map() {\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <MumbaiMap />\n      </div>\n    </div>\n  );\n}","size_bytes":322},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/patient-journey.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport GlassCard from \"@/components/glass-card\";\nimport { ArrowRight, User, Calendar, FileText, TestTube, CheckCircle, Activity } from \"lucide-react\";\n\nexport default function PatientJourney() {\n  const journeySteps = [\n    {\n      id: 1,\n      title: \"Registration\",\n      icon: <User className=\"w-8 h-8\" />,\n      description: \"Patient arrives and registers with AI-powered intake system\",\n      duration: \"2-3 mins\",\n      color: \"text-neon-cyan\",\n      bgColor: \"bg-neon-cyan/20\"\n    },\n    {\n      id: 2,\n      title: \"AI Triage\",\n      icon: <Activity className=\"w-8 h-8\" />,\n      description: \"AI analyzes symptoms and assigns priority level\",\n      duration: \"30 seconds\",\n      color: \"text-neon-purple\",\n      bgColor: \"bg-neon-purple/20\"\n    },\n    {\n      id: 3,\n      title: \"Appointment\",\n      icon: <Calendar className=\"w-8 h-8\" />,\n      description: \"Smart scheduling based on urgency and doctor availability\",\n      duration: \"1-2 mins\",\n      color: \"text-neon-blue\",\n      bgColor: \"bg-neon-blue/20\"\n    },\n    {\n      id: 4,\n      title: \"Consultation\",\n      icon: <FileText className=\"w-8 h-8\" />,\n      description: \"Doctor consultation with AI-assisted diagnosis support\",\n      duration: \"10-15 mins\",\n      color: \"text-green-400\",\n      bgColor: \"bg-green-400/20\"\n    },\n    {\n      id: 5,\n      title: \"Tests/Imaging\",\n      icon: <TestTube className=\"w-8 h-8\" />,\n      description: \"AI-recommended tests and real-time processing\",\n      duration: \"5-30 mins\",\n      color: \"text-orange-400\",\n      bgColor: \"bg-orange-400/20\"\n    },\n    {\n      id: 6,\n      title: \"Results & Discharge\",\n      icon: <CheckCircle className=\"w-8 h-8\" />,\n      description: \"AI-generated report with follow-up recommendations\",\n      duration: \"2-5 mins\",\n      color: \"text-pink-400\",\n      bgColor: \"bg-pink-400/20\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <section className=\"py-20 px-6\">\n          <div className=\"container mx-auto\">\n            <div className=\"text-center mb-16\" data-testid=\"journey-header\">\n              <h2 className=\"text-4xl font-bold mb-4 text-glow\">AI-Powered Patient Journey</h2>\n              <p className=\"text-xl opacity-80\">Seamless healthcare experience from registration to discharge</p>\n            </div>\n\n            {/* Journey Flowchart */}\n            <div className=\"max-w-6xl mx-auto\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\" data-testid=\"journey-steps\">\n                {journeySteps.map((step, index) => (\n                  <div key={step.id} className=\"relative\">\n                    <GlassCard \n                      className={`hover-glow animate-slide-up ${step.bgColor} border-2 border-transparent hover:border-current transition-all duration-300`}\n                      style={{ animationDelay: `${index * 0.1}s` }}\n                      data-testid={`journey-step-${step.id}`}\n                    >\n                      <div className={`${step.color} mb-4`}>\n                        {step.icon}\n                      </div>\n                      <h3 className={`text-xl font-semibold mb-2 ${step.color}`}>\n                        Step {step.id}: {step.title}\n                      </h3>\n                      <p className=\"text-sm mb-4 opacity-90\">\n                        {step.description}\n                      </p>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-xs text-neon-purple\">⏱️ {step.duration}</span>\n                        <div className=\"w-3 h-3 bg-current rounded-full animate-pulse-glow\"></div>\n                      </div>\n                    </GlassCard>\n                    \n                    {/* Arrow connector */}\n                    {index < journeySteps.length - 1 && (\n                      <div className=\"hidden lg:block absolute top-1/2 -right-4 transform -translate-y-1/2 z-10\">\n                        <ArrowRight className=\"w-6 h-6 text-neon-cyan animate-pulse\" />\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Journey Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mt-16\" data-testid=\"journey-stats\">\n              <GlassCard className=\"text-center hover-glow\">\n                <div className=\"text-3xl font-bold text-neon-cyan mb-2\">78%</div>\n                <div className=\"text-sm opacity-80\">Faster Patient Processing</div>\n                <div className=\"mt-2 text-xs text-neon-purple\">🤖 AI Optimization</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <div className=\"text-3xl font-bold text-green-400 mb-2\">92%</div>\n                <div className=\"text-sm opacity-80\">Patient Satisfaction</div>\n                <div className=\"mt-2 text-xs text-neon-purple\">📊 Real-time Feedback</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <div className=\"text-3xl font-bold text-orange-400 mb-2\">15min</div>\n                <div className=\"text-sm opacity-80\">Average Wait Time</div>\n                <div className=\"mt-2 text-xs text-neon-purple\">⚡ AI Scheduling</div>\n              </GlassCard>\n            </div>\n\n            {/* Journey Optimization */}\n            <div className=\"mt-16\">\n              <GlassCard className=\"hover-glow\" data-testid=\"journey-optimization\">\n                <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n                  <span className=\"w-3 h-3 bg-neon-cyan rounded-full mr-3 animate-pulse-glow\"></span>\n                  AI Journey Optimization\n                </h3>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-4 text-neon-purple\">Real-time Adaptations</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 glass-dark rounded-lg\">\n                        <span className=\"text-sm\">Dynamic queue management</span>\n                        <span className=\"text-green-400 text-xs\">Active</span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 glass-dark rounded-lg\">\n                        <span className=\"text-sm\">Predictive resource allocation</span>\n                        <span className=\"text-green-400 text-xs\">Active</span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 glass-dark rounded-lg\">\n                        <span className=\"text-sm\">Automated follow-up scheduling</span>\n                        <span className=\"text-green-400 text-xs\">Active</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-4 text-neon-purple\">Patient Experience Features</h4>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 glass-dark rounded-lg\">\n                        <span className=\"text-sm\">Mobile wait time updates</span>\n                        <span className=\"text-neon-cyan text-xs\">📱 SMS/App</span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 glass-dark rounded-lg\">\n                        <span className=\"text-sm\">Multi-language AI support</span>\n                        <span className=\"text-neon-cyan text-xs\">🗣️ 8 Languages</span>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 glass-dark rounded-lg\">\n                        <span className=\"text-sm\">Digital payment integration</span>\n                        <span className=\"text-neon-cyan text-xs\">💳 Contactless</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </GlassCard>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":8405},"client/src/pages/simulator.tsx":{"content":"import Navigation from \"@/components/navigation\";\nimport ScenarioSimulator from \"@/components/scenario-simulator\";\n\nexport default function Simulator() {\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <ScenarioSimulator />\n      </div>\n    </div>\n  );\n}","size_bytes":352},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/public/sw.js":{"content":"// MumbaiHacks AI Health Service Worker\n// Enables offline functionality and push notifications\n\nconst CACHE_NAME = 'mumbai-health-v1';\nconst urlsToCache = [\n  '/',\n  '/dashboard',\n  '/map',\n  '/advisory',\n  '/patient-journey',\n  '/ar-vision',\n  '/simulator',\n  '/offline.html'\n];\n\n// Install Service Worker\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event - serve cached content when offline\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate Service Worker\nself.addEventListener('activate', (event) => {\n  const cacheWhitelist = [CACHE_NAME];\n  \n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Push Notification Handler\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'Health alert from MumbaiHacks AI Health',\n    icon: '/icon-192x192.png',\n    badge: '/icon-192x192.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'View Dashboard',\n        icon: '/icon-192x192.png'\n      },\n      {\n        action: 'close',\n        title: 'Close notification',\n        icon: '/icon-192x192.png'\n      }\n    ]\n  };\n  \n  event.waitUntil(\n    self.registration.showNotification('MumbaiHacks AI Health', options)\n  );\n});\n\n// Notification click handler\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n  \n  if (event.action === 'explore') {\n    event.waitUntil(\n      clients.openWindow('/dashboard')\n    );\n  } else if (event.action === 'close') {\n    event.notification.close();\n  }\n});\n\n// Background sync for offline data\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'health-data-sync') {\n    event.waitUntil(syncHealthData());\n  }\n});\n\nfunction syncHealthData() {\n  // Sync any pending health data when connection is restored\n  return fetch('/api/sync-offline-data', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      timestamp: Date.now(),\n      offline_data: localStorage.getItem('offline_health_data')\n    })\n  });\n}","size_bytes":2790},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/contexts/AuthContext';\nimport { Redirect } from 'wouter';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { currentUser } = useAuth();\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <>{children}</>;\n}","size_bytes":355},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { \n  User, \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  updateProfile,\n  Auth\n} from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\n\ninterface AuthContextType {\n  currentUser: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, displayName: string) => Promise<void>;\n  logout: () => Promise<void>;\n  updateUserProfile: (displayName: string) => Promise<void>;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType>({} as AuthContextType);\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const register = async (email: string, password: string, displayName: string) => {\n    // Mock registration - for development\n    console.log('Mock registration:', { email, displayName });\n    // Simulate successful registration\n    const mockUser = { uid: '123', email, displayName } as User;\n    setCurrentUser(mockUser);\n  };\n\n  const login = async (email: string, password: string) => {\n    // Mock login - for development\n    console.log('Mock login:', { email });\n    // Simulate successful login\n    const mockUser = { uid: '123', email, displayName: 'Demo User' } as User;\n    setCurrentUser(mockUser);\n  };\n\n  const logout = async () => {\n    // Mock logout - for development\n    console.log('Mock logout');\n    setCurrentUser(null);\n  };\n\n  const updateUserProfile = async (displayName: string) => {\n    if (currentUser) {\n      await updateProfile(currentUser, { displayName });\n      // Force refresh the user object\n      await currentUser.reload();\n      setCurrentUser({ ...currentUser });\n    }\n  };\n\n  useEffect(() => {\n    // Mock auth state change\n    const unsubscribe = (auth as any).onAuthStateChanged((user: User | null) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    updateUserProfile,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":2412},"client/src/lib/firebase.ts":{"content":"// Temporarily disable Firebase to get the app running\n// We'll implement a mock auth system until Firebase is properly configured\n\nconsole.log('Using mock Firebase implementation for development');\n\n// Mock auth object that mimics Firebase Auth interface\nconst mockAuth = {\n  currentUser: null,\n  onAuthStateChanged: (callback: (user: any) => void) => {\n    // Simulate no user logged in\n    setTimeout(() => callback(null), 100);\n    return () => {}; // unsubscribe function\n  }\n};\n\n// Mock database object\nconst mockDb = {};\n\nexport const auth = mockAuth;\nexport const db = mockDb;\nexport default null;","size_bytes":605},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Sparkles, Activity, Brain, Shield, Zap, Globe } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center px-6\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-neon-cyan/20 rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-neon-purple/20 rounded-full blur-3xl animate-pulse\" style={{animationDelay: '2s'}}></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-blue-500/20 rounded-full blur-3xl animate-pulse\" style={{animationDelay: '4s'}}></div>\n        </div>\n\n        <div className=\"relative z-10 text-center max-w-6xl mx-auto\">\n          {/* Main Title */}\n          <div className=\"mb-8 animate-fade-in\">\n            <div className=\"flex items-center justify-center space-x-4 mb-6\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-2xl flex items-center justify-center\">\n                <Activity className=\"w-10 h-10 text-white animate-pulse\" />\n              </div>\n              <Sparkles className=\"w-8 h-8 text-neon-cyan animate-bounce\" />\n            </div>\n            \n            <h1 className=\"text-7xl md:text-8xl font-bold mb-6 text-glow leading-tight\">\n              <span className=\"bg-gradient-to-r from-neon-cyan via-white to-neon-purple bg-clip-text text-transparent\">\n                MumbaiHacks\n              </span>\n              <br />\n              <span className=\"bg-gradient-to-r from-neon-purple via-neon-cyan to-blue-400 bg-clip-text text-transparent animate-pulse\">\n                AI Health\n              </span>\n            </h1>\n\n            <p className=\"text-2xl md:text-3xl font-light mb-12 text-gray-200 max-w-4xl mx-auto leading-relaxed\">\n              Revolutionary AI-powered healthcare platform with \n              <span className=\"text-neon-cyan font-semibold\"> predictive analytics</span>, \n              <span className=\"text-neon-purple font-semibold\"> AR visualization</span>, and \n              <span className=\"text-blue-400 font-semibold\"> real-time monitoring</span>\n            </p>\n          </div>\n\n          {/* Feature Highlights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16 animate-slide-up\">\n            <div className=\"glass-dark p-6 rounded-2xl border border-neon-cyan/30 hover:border-neon-cyan/60 transition-all hover:scale-105\">\n              <Brain className=\"w-12 h-12 text-neon-cyan mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-neon-cyan mb-2\">AI Predictive Analytics</h3>\n              <p className=\"text-gray-300\">7-day surge forecasting and real-time health insights</p>\n            </div>\n            \n            <div className=\"glass-dark p-6 rounded-2xl border border-neon-purple/30 hover:border-neon-purple/60 transition-all hover:scale-105\">\n              <Zap className=\"w-12 h-12 text-neon-purple mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-neon-purple mb-2\">AR Vision System</h3>\n              <p className=\"text-gray-300\">Augmented reality for medical diagnostics and navigation</p>\n            </div>\n            \n            <div className=\"glass-dark p-6 rounded-2xl border border-blue-400/30 hover:border-blue-400/60 transition-all hover:scale-105\">\n              <Globe className=\"w-12 h-12 text-blue-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-blue-400 mb-2\">Community Health</h3>\n              <p className=\"text-gray-300\">Social features, challenges, and telemedicine platform</p>\n            </div>\n          </div>\n\n          {/* CTA Button */}\n          <div className=\"animate-bounce-slow\">\n            <Link href=\"/login\">\n              <button className=\"group relative px-12 py-6 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-2xl text-2xl font-bold text-white hover:scale-110 transition-all duration-300 shadow-2xl\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-2xl blur-xl opacity-60 group-hover:opacity-100 transition-opacity\"></div>\n                <div className=\"relative flex items-center space-x-3\">\n                  <Shield className=\"w-8 h-8\" />\n                  <span>Enter Platform</span>\n                  <Sparkles className=\"w-6 h-6 animate-spin\" />\n                </div>\n              </button>\n            </Link>\n          </div>\n\n          {/* Subtitle */}\n          <p className=\"mt-8 text-lg text-gray-400 animate-fade-in-delay\">\n            Secure • AI-Powered • Real-Time • Mumbai-First\n          </p>\n        </div>\n      </section>\n\n      {/* Stats Banner */}\n      <section className=\"py-16 px-6\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"text-center glass-dark p-6 rounded-xl border border-green-400/30\">\n              <div className=\"text-4xl font-bold text-green-400 mb-2\">50+</div>\n              <div className=\"text-gray-300\">Connected Hospitals</div>\n            </div>\n            \n            <div className=\"text-center glass-dark p-6 rounded-xl border border-neon-cyan/30\">\n              <div className=\"text-4xl font-bold text-neon-cyan mb-2\">99.9%</div>\n              <div className=\"text-gray-300\">System Uptime</div>\n            </div>\n            \n            <div className=\"text-center glass-dark p-6 rounded-xl border border-neon-purple/30\">\n              <div className=\"text-4xl font-bold text-neon-purple mb-2\">24/7</div>\n              <div className=\"text-gray-300\">AI Monitoring</div>\n            </div>\n            \n            <div className=\"text-center glass-dark p-6 rounded-xl border border-orange-400/30\">\n              <div className=\"text-4xl font-bold text-orange-400 mb-2\">92%</div>\n              <div className=\"text-gray-300\">Preparedness Score</div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":6312},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Mail, Lock, User, Eye, EyeOff, Activity, Sparkles, Heart } from \"lucide-react\";\n\nexport default function Login() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n\n  const { login, register } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      if (isLogin) {\n        await login(email, password);\n        setSuccess(true);\n        \n        // Success animation delay\n        setTimeout(() => {\n          setLocation(\"/dashboard\");\n        }, 1500);\n      } else {\n        await register(email, password, displayName);\n        setSuccess(true);\n        \n        // Success animation delay\n        setTimeout(() => {\n          setLocation(\"/dashboard\");\n        }, 1500);\n      }\n    } catch (err: any) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  // Success Animation Component\n  if (success) {\n    return (\n      <div className=\"min-h-screen gradient-bg flex items-center justify-center px-6\">\n        <div className=\"text-center animate-bounce\">\n          <div className=\"w-32 h-32 mx-auto mb-8 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-green-400 to-neon-cyan rounded-full animate-ping opacity-60\"></div>\n            <div className=\"absolute inset-4 bg-gradient-to-r from-green-400 to-neon-cyan rounded-full flex items-center justify-center animate-pulse\">\n              <Heart className=\"w-16 h-16 text-white animate-pulse\" fill=\"currentColor\" />\n            </div>\n          </div>\n          <h2 className=\"text-3xl font-bold text-green-400 mb-4\">Welcome to MumbaiHacks AI Health!</h2>\n          <p className=\"text-xl text-gray-300\">Redirecting to dashboard...</p>\n          <div className=\"flex justify-center space-x-2 mt-6\">\n            <div className=\"w-3 h-3 bg-neon-cyan rounded-full animate-bounce\"></div>\n            <div className=\"w-3 h-3 bg-neon-purple rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n            <div className=\"w-3 h-3 bg-green-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center px-6\">\n      {/* Background Effects */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-neon-cyan/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-64 h-64 bg-neon-purple/10 rounded-full blur-3xl animate-pulse\" style={{animationDelay: '2s'}}></div>\n      </div>\n\n      <div className=\"relative z-10 w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\">\n            <div className=\"inline-flex items-center space-x-3 mb-6 group cursor-pointer\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform\">\n                <Activity className=\"w-8 h-8 text-white\" />\n              </div>\n              <span className=\"text-2xl font-bold text-glow\">MumbaiHacks AI Health</span>\n            </div>\n          </Link>\n          \n          <h1 className=\"text-3xl font-bold mb-2 text-glow\">\n            {isLogin ? \"Welcome Back!\" : \"Join the Platform\"}\n          </h1>\n          <p className=\"text-gray-400\">\n            {isLogin ? \"Sign in to access your health dashboard\" : \"Create your account to get started\"}\n          </p>\n        </div>\n\n        {/* Auth Form */}\n        <div className=\"glass-dark rounded-2xl p-8 border border-neon-cyan/30\">\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500 rounded-lg text-red-400 text-sm animate-shake\">\n              {error}\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <label className=\"block text-sm font-semibold text-gray-300\">Full Name</label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neon-purple\" />\n                  <input\n                    type=\"text\"\n                    value={displayName}\n                    onChange={(e) => setDisplayName(e.target.value)}\n                    className=\"w-full pl-12 pr-4 py-3 bg-black/30 border border-neon-purple/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-neon-purple focus:ring-2 focus:ring-neon-purple/20 transition-all\"\n                    placeholder=\"Enter your full name\"\n                    required\n                  />\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm font-semibold text-gray-300\">Email</label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neon-cyan\" />\n                <input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full pl-12 pr-4 py-3 bg-black/30 border border-neon-cyan/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-neon-cyan focus:ring-2 focus:ring-neon-cyan/20 transition-all\"\n                  placeholder=\"Enter your email\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm font-semibold text-gray-300\">Password</label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neon-purple\" />\n                <input\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full pl-12 pr-12 py-3 bg-black/30 border border-neon-purple/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-neon-purple focus:ring-2 focus:ring-neon-purple/20 transition-all\"\n                  placeholder=\"Enter your password\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-neon-purple transition-colors\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full py-3 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-lg text-white font-bold text-lg hover:scale-105 transition-all disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n            >\n              {loading ? (\n                <div className=\"flex items-center justify-center space-x-3\">\n                  <div className=\"w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  <span>{isLogin ? \"Signing In...\" : \"Creating Account...\"}</span>\n                  <Heart className=\"w-5 h-5 animate-pulse\" />\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <span>{isLogin ? \"Sign In\" : \"Create Account\"}</span>\n                  <Sparkles className=\"w-5 h-5 group-hover:animate-spin transition-all\" />\n                </div>\n              )}\n            </button>\n          </form>\n\n          {/* Switch Mode */}\n          <div className=\"mt-6 text-center\">\n            <button\n              onClick={() => {\n                setIsLogin(!isLogin);\n                setError(\"\");\n                setEmail(\"\");\n                setPassword(\"\");\n                setDisplayName(\"\");\n              }}\n              className=\"text-neon-cyan hover:text-neon-purple transition-colors font-semibold\"\n            >\n              {isLogin ? \"Don't have an account? Sign Up\" : \"Already have an account? Sign In\"}\n            </button>\n          </div>\n\n          {/* Back to Landing */}\n          <div className=\"mt-4 text-center\">\n            <Link href=\"/\" className=\"text-gray-400 hover:text-white transition-colors text-sm\">\n              ← Back to Home\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9333},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport GlassCard from \"@/components/glass-card\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { User, Mail, Edit, LogOut, Save, X, Shield, Activity, Calendar, Award } from \"lucide-react\";\n\nexport default function Profile() {\n  const { currentUser, logout, updateUserProfile } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [newDisplayName, setNewDisplayName] = useState(currentUser?.displayName || \"\");\n  const [loading, setLoading] = useState(false);\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const handleUpdateProfile = async () => {\n    if (!newDisplayName.trim()) return;\n    \n    setLoading(true);\n    try {\n      await updateUserProfile(newDisplayName);\n      setIsEditing(false);\n    } catch (error) {\n      console.error(\"Failed to update profile:\", error);\n    }\n    setLoading(false);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error(\"Failed to log out:\", error);\n    }\n  };\n\n  const memberSince = new Date(currentUser?.metadata.creationTime || Date.now()).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long'\n  });\n\n  return (\n    <div className=\"min-h-screen gradient-bg text-white\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <section className=\"py-20 px-6\">\n          <div className=\"container mx-auto max-w-4xl\">\n            \n            {/* Header */}\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl font-bold mb-4 text-glow\">👤 User Profile</h2>\n              <p className=\"text-xl opacity-80\">Manage your account and preferences</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              \n              {/* Profile Card */}\n              <div className=\"lg:col-span-2\">\n                <GlassCard className=\"hover-glow\">\n                  <div className=\"text-center mb-8\">\n                    {/* Avatar */}\n                    <div className=\"w-32 h-32 mx-auto mb-6 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-full flex items-center justify-center text-4xl font-bold text-white shadow-2xl\">\n                      {currentUser?.photoURL ? (\n                        <img \n                          src={currentUser.photoURL} \n                          alt=\"Profile\" \n                          className=\"w-full h-full rounded-full object-cover\"\n                        />\n                      ) : (\n                        getInitials(currentUser?.displayName || currentUser?.email || \"User\")\n                      )}\n                    </div>\n\n                    {/* Name Section */}\n                    {isEditing ? (\n                      <div className=\"space-y-4\">\n                        <input\n                          type=\"text\"\n                          value={newDisplayName}\n                          onChange={(e) => setNewDisplayName(e.target.value)}\n                          className=\"text-2xl font-bold text-center bg-black/30 border border-neon-cyan/50 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-neon-cyan focus:ring-2 focus:ring-neon-cyan/20 transition-all\"\n                          placeholder=\"Enter your name\"\n                        />\n                        <div className=\"flex justify-center space-x-3\">\n                          <button\n                            onClick={handleUpdateProfile}\n                            disabled={loading}\n                            className=\"px-4 py-2 bg-green-500/20 border border-green-500 rounded-lg hover:bg-green-500/30 transition-all text-white font-bold flex items-center space-x-2 disabled:opacity-50\"\n                          >\n                            <Save className=\"w-4 h-4\" />\n                            <span>{loading ? \"Saving...\" : \"Save\"}</span>\n                          </button>\n                          <button\n                            onClick={() => {\n                              setIsEditing(false);\n                              setNewDisplayName(currentUser?.displayName || \"\");\n                            }}\n                            className=\"px-4 py-2 bg-red-500/20 border border-red-500 rounded-lg hover:bg-red-500/30 transition-all text-white font-bold flex items-center space-x-2\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                            <span>Cancel</span>\n                          </button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div>\n                        <h3 className=\"text-3xl font-bold text-neon-cyan mb-2\">\n                          {currentUser?.displayName || \"User\"}\n                        </h3>\n                        <button\n                          onClick={() => setIsEditing(true)}\n                          className=\"inline-flex items-center space-x-2 text-neon-purple hover:text-white transition-colors\"\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                          <span>Edit Name</span>\n                        </button>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* User Info */}\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center space-x-4 p-4 glass-dark rounded-lg\">\n                      <Mail className=\"w-6 h-6 text-neon-cyan\" />\n                      <div>\n                        <div className=\"text-sm text-gray-400\">Email Address</div>\n                        <div className=\"font-semibold\">{currentUser?.email}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4 p-4 glass-dark rounded-lg\">\n                      <Calendar className=\"w-6 h-6 text-neon-purple\" />\n                      <div>\n                        <div className=\"text-sm text-gray-400\">Member Since</div>\n                        <div className=\"font-semibold\">{memberSince}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4 p-4 glass-dark rounded-lg\">\n                      <Shield className=\"w-6 h-6 text-green-400\" />\n                      <div>\n                        <div className=\"text-sm text-gray-400\">Account Status</div>\n                        <div className=\"font-semibold text-green-400\">\n                          {currentUser?.emailVerified ? \"Verified\" : \"Unverified\"}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4 p-4 glass-dark rounded-lg\">\n                      <User className=\"w-6 h-6 text-orange-400\" />\n                      <div>\n                        <div className=\"text-sm text-gray-400\">User ID</div>\n                        <div className=\"font-mono text-sm opacity-70\">{currentUser?.uid.substring(0, 12)}...</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Logout Button */}\n                  <div className=\"mt-8 pt-6 border-t border-gray-600\">\n                    <button\n                      onClick={handleLogout}\n                      className=\"w-full p-4 bg-red-500/20 border border-red-500 rounded-lg hover:bg-red-500/30 transition-all text-white font-bold flex items-center justify-center space-x-3 group\"\n                    >\n                      <LogOut className=\"w-5 h-5 group-hover:animate-pulse\" />\n                      <span>Sign Out</span>\n                    </button>\n                  </div>\n                </GlassCard>\n              </div>\n\n              {/* Stats & Achievements */}\n              <div className=\"space-y-6\">\n                <GlassCard className=\"hover-glow\">\n                  <h4 className=\"text-xl font-bold text-neon-cyan mb-6 flex items-center space-x-2\">\n                    <Activity className=\"w-6 h-6\" />\n                    <span>Activity Stats</span>\n                  </h4>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"text-center p-4 glass-dark rounded-lg\">\n                      <div className=\"text-2xl font-bold text-neon-cyan\">15</div>\n                      <div className=\"text-sm opacity-70\">Dashboard Views</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 glass-dark rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-400\">7</div>\n                      <div className=\"text-sm opacity-70\">Health Checks</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 glass-dark rounded-lg\">\n                      <div className=\"text-2xl font-bold text-neon-purple\">3</div>\n                      <div className=\"text-sm opacity-70\">AR Sessions</div>\n                    </div>\n                  </div>\n                </GlassCard>\n\n                <GlassCard className=\"hover-glow\">\n                  <h4 className=\"text-xl font-bold text-yellow-400 mb-6 flex items-center space-x-2\">\n                    <Award className=\"w-6 h-6\" />\n                    <span>Achievements</span>\n                  </h4>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3 p-3 glass-dark rounded-lg\">\n                      <div className=\"w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center\">\n                        <span className=\"text-sm\">🏆</span>\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-green-400\">Early Adopter</div>\n                        <div className=\"text-xs opacity-70\">Joined in beta phase</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3 p-3 glass-dark rounded-lg\">\n                      <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                        <span className=\"text-sm\">🔬</span>\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-blue-400\">Health Explorer</div>\n                        <div className=\"text-xs opacity-70\">Explored all features</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3 p-3 glass-dark rounded-lg opacity-50\">\n                      <div className=\"w-8 h-8 bg-gray-500/20 rounded-full flex items-center justify-center\">\n                        <span className=\"text-sm\">🎯</span>\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-gray-400\">Power User</div>\n                        <div className=\"text-xs opacity-70\">Use app for 30 days</div>\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n              </div>\n\n            </div>\n\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":11375},"client/src/pages/social.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport GlassCard from \"@/components/glass-card\";\nimport { \n  MessageCircle, Users, Trophy, Medal, Award, Star, ThumbsUp, Heart, Share2, \n  TrendingUp, Target, Zap, Calendar, BookOpen, Gift, Crown, Shield, \n  Activity, Clock, MapPin, Phone, UserPlus, MessageSquare, Bell\n} from \"lucide-react\";\n\nexport default function Social() {\n  const [activeTab, setActiveTab] = useState<'forums' | 'challenges' | 'rewards' | 'leaderboard'>('forums');\n  const [userPoints, setUserPoints] = useState(2847);\n  const [userLevel, setUserLevel] = useState(12);\n  const [userBadges, setUserBadges] = useState(['Early Adopter', 'Health Champion', 'Community Helper']);\n  const [notifications, setNotifications] = useState(3);\n\n  // Community Forums Data\n  const forumTopics = [\n    {\n      id: 1,\n      title: \"Best hospitals for cardiac surgery in Mumbai?\",\n      author: \"Priya S.\",\n      replies: 47,\n      likes: 123,\n      category: \"Healthcare Advice\",\n      timestamp: \"2 hours ago\",\n      trending: true\n    },\n    {\n      id: 2, \n      title: \"Air quality impact on respiratory health - personal experiences\",\n      author: \"Dr. Rajesh K.\",\n      replies: 89,\n      likes: 234,\n      category: \"Environmental Health\",\n      timestamp: \"5 hours ago\",\n      verified: true\n    },\n    {\n      id: 3,\n      title: \"Mental health support during medical treatment\",\n      author: \"Ananya M.\",\n      replies: 31,\n      likes: 156,\n      category: \"Mental Health\",\n      timestamp: \"1 day ago\",\n      featured: true\n    },\n    {\n      id: 4,\n      title: \"Vaccination drive updates - Bandra West\",\n      author: \"Mumbai Health Dept\",\n      replies: 67,\n      likes: 189,\n      category: \"Public Health\",\n      timestamp: \"2 days ago\",\n      official: true\n    }\n  ];\n\n  // Health Challenges Data\n  const healthChallenges = [\n    {\n      id: 1,\n      title: \"Mumbai Walking Challenge\",\n      description: \"Walk 10,000 steps daily for 30 days\",\n      participants: 2847,\n      prize: \"₹5000 voucher + Health checkup\",\n      progress: 67,\n      daysLeft: 18,\n      category: \"Fitness\",\n      difficulty: \"Beginner\"\n    },\n    {\n      id: 2,\n      title: \"Mental Wellness Week\",\n      description: \"Complete meditation sessions and mental health activities\",\n      participants: 1523,\n      prize: \"Wellness retreat + ₹3000\",\n      progress: 45,\n      daysLeft: 5,\n      category: \"Mental Health\",\n      difficulty: \"Intermediate\"\n    },\n    {\n      id: 3,\n      title: \"Healthy Eating Mumbai\",\n      description: \"Log nutritious meals and share healthy recipes\",\n      participants: 892,\n      prize: \"Nutrition consultation + ₹2000\",\n      progress: 23,\n      daysLeft: 12,\n      category: \"Nutrition\",\n      difficulty: \"Easy\"\n    }\n  ];\n\n  // Leaderboard Data\n  const leaderboard = [\n    {\n      rank: 1,\n      name: \"Arjun Patel\",\n      points: 15847,\n      level: 28,\n      badge: \"Health Guardian\",\n      activity: \"Completed 15 challenges\",\n      location: \"Andheri West\"\n    },\n    {\n      rank: 2,\n      name: \"Dr. Kavya Sharma\", \n      points: 14562,\n      level: 26,\n      badge: \"Medical Expert\",\n      activity: \"Helped 200+ users\",\n      location: \"Bandra East\",\n      verified: true\n    },\n    {\n      rank: 3,\n      name: \"Ravi Kumar\",\n      points: 12934,\n      level: 24,\n      badge: \"Fitness Champion\",\n      activity: \"30-day streak\",\n      location: \"Malad West\"\n    },\n    {\n      rank: 4,\n      name: \"You\",\n      points: userPoints,\n      level: userLevel,\n      badge: \"Community Helper\", \n      activity: \"Active member\",\n      location: \"Mumbai\",\n      isCurrentUser: true\n    }\n  ];\n\n  // Rewards & Redemption Data\n  const rewards = [\n    {\n      id: 1,\n      name: \"Free Health Checkup\",\n      points: 5000,\n      description: \"Complete health screening at partner hospitals\",\n      category: \"Health Services\",\n      available: 45,\n      redeemed: 12,\n      partner: \"Apollo Hospitals\"\n    },\n    {\n      id: 2,\n      name: \"Pharmacy Discount Voucher\",\n      points: 1000,\n      description: \"25% off on medicines at partner pharmacies\",\n      category: \"Discounts\",\n      available: 156,\n      redeemed: 67,\n      partner: \"Apollo Pharmacy\"\n    },\n    {\n      id: 3,\n      name: \"Fitness Tracker\",\n      points: 8000,\n      description: \"Premium fitness tracking device\",\n      category: \"Gadgets\",\n      available: 8,\n      redeemed: 3,\n      partner: \"Fitbit\"\n    },\n    {\n      id: 4,\n      name: \"Nutrition Consultation\",\n      points: 3000,\n      description: \"1-on-1 session with certified nutritionist\",\n      category: \"Consultations\",\n      available: 23,\n      redeemed: 15,\n      partner: \"Nutrition Experts\"\n    }\n  ];\n\n  const redeemReward = (rewardId: number, cost: number) => {\n    if (userPoints >= cost) {\n      setUserPoints(prev => prev - cost);\n      alert(`🎉 Reward redeemed successfully! New balance: ${userPoints - cost} points`);\n    } else {\n      alert(`❌ Insufficient points. You need ${cost - userPoints} more points.`);\n    }\n  };\n\n  const joinChallenge = (challengeId: number) => {\n    alert(`🚀 Successfully joined challenge! Good luck on your health journey!`);\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <section className=\"py-20 px-6\">\n          <div className=\"container mx-auto\">\n            \n            {/* Header */}\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl font-bold mb-4 text-glow\">🌟 Mumbai Health Community</h2>\n              <p className=\"text-xl opacity-80\">Connect, compete, and achieve wellness goals together</p>\n            </div>\n\n            {/* User Stats Bar */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-12\">\n              <GlassCard className=\"text-center hover-glow\">\n                <Crown className=\"w-8 h-8 text-yellow-400 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold text-yellow-400\">{userLevel}</div>\n                <div className=\"text-sm opacity-80\">Level</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <Star className=\"w-8 h-8 text-neon-cyan mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold text-neon-cyan\">{userPoints.toLocaleString()}</div>\n                <div className=\"text-sm opacity-80\">Points</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <Shield className=\"w-8 h-8 text-green-400 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold text-green-400\">{userBadges.length}</div>\n                <div className=\"text-sm opacity-80\">Badges</div>\n              </GlassCard>\n              \n              <GlassCard className=\"text-center hover-glow\">\n                <Bell className=\"w-8 h-8 text-orange-400 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold text-orange-400\">{notifications}</div>\n                <div className=\"text-sm opacity-80\">Notifications</div>\n              </GlassCard>\n            </div>\n\n            {/* Tab Navigation */}\n            <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n              <button \n                onClick={() => setActiveTab('forums')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeTab === 'forums' ? 'border-2 border-neon-cyan' : 'border border-gray-500'\n                }`}\n              >\n                <MessageCircle className=\"w-5 h-5\" />\n                <span>Community Forums</span>\n              </button>\n              \n              <button \n                onClick={() => setActiveTab('challenges')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeTab === 'challenges' ? 'border-2 border-green-400' : 'border border-gray-500'\n                }`}\n              >\n                <Target className=\"w-5 h-5\" />\n                <span>Health Challenges</span>\n              </button>\n              \n              <button \n                onClick={() => setActiveTab('leaderboard')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeTab === 'leaderboard' ? 'border-2 border-yellow-400' : 'border border-gray-500'\n                }`}\n              >\n                <Trophy className=\"w-5 h-5\" />\n                <span>Leaderboard</span>\n              </button>\n              \n              <button \n                onClick={() => setActiveTab('rewards')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeTab === 'rewards' ? 'border-2 border-neon-purple' : 'border border-gray-500'\n                }`}\n              >\n                <Gift className=\"w-5 h-5\" />\n                <span>Rewards Store</span>\n              </button>\n            </div>\n\n            {/* Community Forums */}\n            {activeTab === 'forums' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">💬 Community Forums</h3>\n                  <p className=\"text-lg opacity-80\">Share experiences, get advice, and support each other</p>\n                </div>\n                \n                {forumTopics.map(topic => (\n                  <GlassCard key={topic.id} className=\"hover-glow\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          {topic.trending && <div className=\"px-2 py-1 bg-red-500/20 text-red-400 text-xs rounded-full\">🔥 Trending</div>}\n                          {topic.featured && <div className=\"px-2 py-1 bg-neon-purple/20 text-neon-purple text-xs rounded-full\">⭐ Featured</div>}\n                          {topic.verified && <div className=\"px-2 py-1 bg-blue-500/20 text-blue-400 text-xs rounded-full\">✓ Verified</div>}\n                          {topic.official && <div className=\"px-2 py-1 bg-green-500/20 text-green-400 text-xs rounded-full\">🏛️ Official</div>}\n                          <div className=\"px-2 py-1 bg-gray-500/20 text-gray-400 text-xs rounded-full\">{topic.category}</div>\n                        </div>\n                        <h4 className=\"text-xl font-bold text-neon-cyan mb-2\">{topic.title}</h4>\n                        <div className=\"flex items-center space-x-4 text-sm opacity-70\">\n                          <span>By {topic.author}</span>\n                          <span>•</span>\n                          <span>{topic.timestamp}</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-6\">\n                        <div className=\"flex items-center space-x-2\">\n                          <MessageSquare className=\"w-4 h-4\" />\n                          <span>{topic.replies} replies</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Heart className=\"w-4 h-4\" />\n                          <span>{topic.likes} likes</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-2\">\n                        <button className=\"px-4 py-2 bg-neon-cyan/20 border border-neon-cyan rounded-lg hover:bg-neon-cyan/30 transition-all\">\n                          Read\n                        </button>\n                        <button className=\"px-4 py-2 bg-green-400/20 border border-green-400 rounded-lg hover:bg-green-400/30 transition-all\">\n                          Reply\n                        </button>\n                      </div>\n                    </div>\n                  </GlassCard>\n                ))}\n              </div>\n            )}\n\n            {/* Health Challenges */}\n            {activeTab === 'challenges' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">🎯 Health Challenges</h3>\n                  <p className=\"text-lg opacity-80\">Join community challenges and win amazing prizes</p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  {healthChallenges.map(challenge => (\n                    <GlassCard key={challenge.id} className=\"hover-glow\">\n                      <div className=\"mb-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h4 className=\"text-xl font-bold text-neon-cyan mb-2\">{challenge.title}</h4>\n                            <p className=\"text-sm opacity-80 mb-2\">{challenge.description}</p>\n                          </div>\n                          <div className={`px-2 py-1 text-xs rounded-full ${\n                            challenge.difficulty === 'Easy' ? 'bg-green-500/20 text-green-400' :\n                            challenge.difficulty === 'Beginner' ? 'bg-blue-500/20 text-blue-400' :\n                            'bg-orange-500/20 text-orange-400'\n                          }`}>\n                            {challenge.difficulty}\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-3 mb-4\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Participants:</span>\n                            <span className=\"text-neon-cyan font-bold\">{challenge.participants.toLocaleString()}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Prize:</span>\n                            <span className=\"text-yellow-400 font-bold\">{challenge.prize}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Days left:</span>\n                            <span className=\"text-orange-400 font-bold\">{challenge.daysLeft} days</span>\n                          </div>\n                          \n                          {/* Progress Bar */}\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span>Your Progress:</span>\n                              <span className=\"text-green-400\">{challenge.progress}%</span>\n                            </div>\n                            <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                              <div \n                                className=\"bg-green-400 h-2 rounded-full transition-all\"\n                                style={{ width: `${challenge.progress}%` }}\n                              ></div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <button \n                          onClick={() => joinChallenge(challenge.id)}\n                          className=\"w-full p-3 bg-green-400/20 border border-green-400 rounded-lg hover:bg-green-400/30 transition-all text-white font-bold\"\n                        >\n                          {challenge.progress > 0 ? 'Continue Challenge' : 'Join Challenge'}\n                        </button>\n                      </div>\n                    </GlassCard>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Leaderboard */}\n            {activeTab === 'leaderboard' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">🏆 Community Leaderboard</h3>\n                  <p className=\"text-lg opacity-80\">Top health champions in Mumbai</p>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  {leaderboard.map(user => (\n                    <GlassCard \n                      key={user.rank} \n                      className={`hover-glow transition-all ${\n                        user.isCurrentUser ? 'border-2 border-neon-cyan bg-neon-cyan/10' : ''\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-6\">\n                          <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg ${\n                            user.rank === 1 ? 'bg-yellow-400 text-black' :\n                            user.rank === 2 ? 'bg-gray-400 text-black' :\n                            user.rank === 3 ? 'bg-orange-400 text-black' :\n                            'bg-neon-cyan/20 text-neon-cyan'\n                          }`}>\n                            {user.rank === 1 ? '👑' : \n                             user.rank === 2 ? '🥈' :\n                             user.rank === 3 ? '🥉' : \n                             user.rank}\n                          </div>\n                          \n                          <div>\n                            <div className=\"flex items-center space-x-2\">\n                              <h4 className={`font-bold text-lg ${user.isCurrentUser ? 'text-neon-cyan' : 'text-white'}`}>\n                                {user.name}\n                              </h4>\n                              {user.verified && <div className=\"text-blue-400\">✓</div>}\n                              {user.isCurrentUser && <div className=\"text-neon-cyan\">(You)</div>}\n                            </div>\n                            <div className=\"flex items-center space-x-4 text-sm opacity-70\">\n                              <span>{user.activity}</span>\n                              <span>•</span>\n                              <span>📍 {user.location}</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-bold text-neon-cyan\">{user.points.toLocaleString()}</div>\n                          <div className=\"text-sm opacity-70\">Level {user.level}</div>\n                          <div className=\"text-xs text-yellow-400\">{user.badge}</div>\n                        </div>\n                      </div>\n                    </GlassCard>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Rewards Store */}\n            {activeTab === 'rewards' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">🎁 Rewards Store</h3>\n                  <p className=\"text-lg opacity-80\">Redeem your points for amazing health benefits</p>\n                  <div className=\"mt-4 text-neon-cyan text-xl font-bold\">\n                    💰 Your Balance: {userPoints.toLocaleString()} points\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  {rewards.map(reward => (\n                    <GlassCard key={reward.id} className=\"hover-glow\">\n                      <div className=\"mb-4\">\n                        <h4 className=\"text-xl font-bold text-neon-cyan mb-2\">{reward.name}</h4>\n                        <p className=\"text-sm opacity-80 mb-4\">{reward.description}</p>\n                        \n                        <div className=\"space-y-2 mb-4 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Cost:</span>\n                            <span className=\"text-yellow-400 font-bold\">{reward.points.toLocaleString()} points</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Category:</span>\n                            <span className=\"text-neon-purple\">{reward.category}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Partner:</span>\n                            <span className=\"text-green-400\">{reward.partner}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Available:</span>\n                            <span className=\"text-orange-400\">{reward.available - reward.redeemed} left</span>\n                          </div>\n                        </div>\n                        \n                        <button \n                          onClick={() => redeemReward(reward.id, reward.points)}\n                          disabled={userPoints < reward.points || reward.available === reward.redeemed}\n                          className={`w-full p-3 rounded-lg font-bold transition-all ${\n                            userPoints >= reward.points && reward.available > reward.redeemed\n                              ? 'bg-neon-purple/20 border border-neon-purple hover:bg-neon-purple/30 text-white'\n                              : 'bg-gray-600/20 border border-gray-600 text-gray-500 cursor-not-allowed'\n                          }`}\n                        >\n                          {userPoints < reward.points \n                            ? `Need ${(reward.points - userPoints).toLocaleString()} more points`\n                            : reward.available === reward.redeemed \n                            ? 'Out of Stock'\n                            : 'Redeem Now'\n                          }\n                        </button>\n                      </div>\n                    </GlassCard>\n                  ))}\n                </div>\n              </div>\n            )}\n\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":22502},"client/src/pages/telemedicine.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Navigation from \"@/components/navigation\";\nimport GlassCard from \"@/components/glass-card\";\nimport { \n  Video, Phone, MessageCircle, Calendar, Clock, User, Heart, \n  Stethoscope, Pill, FileText, Camera, Mic, Shield, \n  Truck, Package, AlertCircle, CheckCircle, Star, \n  Monitor, Activity, Wifi, Signal, Battery, Volume2\n} from \"lucide-react\";\n\nexport default function Telemedicine() {\n  const [activeService, setActiveService] = useState<'consultation' | 'monitoring' | 'pharmacy' | 'ai-triage'>('consultation');\n  const [isInCall, setIsInCall] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [vitalSigns, setVitalSigns] = useState({\n    heartRate: 72,\n    bloodPressure: \"120/80\",\n    oxygenSat: 98,\n    temperature: 98.6,\n    respiratoryRate: 16\n  });\n\n  // AI Triage System\n  const [symptoms, setSymptoms] = useState('');\n  const [triageResult, setTriageResult] = useState<any>(null);\n  const [triageLoading, setTriageLoading] = useState(false);\n\n  // Remote monitoring data\n  const [monitoringDevices, setMonitoringDevices] = useState([\n    {\n      id: 1,\n      name: \"Smart Blood Pressure Monitor\",\n      status: \"connected\",\n      batteryLevel: 85,\n      lastReading: \"2 minutes ago\",\n      value: \"118/78 mmHg\"\n    },\n    {\n      id: 2,\n      name: \"Pulse Oximeter\",\n      status: \"connected\", \n      batteryLevel: 92,\n      lastReading: \"1 minute ago\",\n      value: \"98% SpO2\"\n    },\n    {\n      id: 3,\n      name: \"Smart Thermometer\",\n      status: \"disconnected\",\n      batteryLevel: 23,\n      lastReading: \"1 hour ago\",\n      value: \"98.6°F\"\n    }\n  ]);\n\n  // Available doctors for consultation\n  const availableDoctors = [\n    {\n      id: 1,\n      name: \"Dr. Priya Sharma\",\n      specialty: \"General Physician\",\n      rating: 4.9,\n      experience: \"12 years\",\n      consultationFee: 500,\n      availability: \"Available now\",\n      languages: [\"English\", \"Hindi\", \"Gujarati\"],\n      image: \"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=150&h=150&fit=crop&crop=face\"\n    },\n    {\n      id: 2,\n      name: \"Dr. Rajesh Mehta\",\n      specialty: \"Cardiologist\", \n      rating: 4.8,\n      experience: \"18 years\",\n      consultationFee: 800,\n      availability: \"Next: 15 mins\",\n      languages: [\"English\", \"Hindi\", \"Marathi\"],\n      image: \"https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?w=150&h=150&fit=crop&crop=face\"\n    },\n    {\n      id: 3,\n      name: \"Dr. Kavita Patel\",\n      specialty: \"Pediatrician\",\n      rating: 4.9,\n      experience: \"10 years\", \n      consultationFee: 600,\n      availability: \"Next: 8 mins\",\n      languages: [\"English\", \"Hindi\", \"Gujarati\"],\n      image: \"https://images.unsplash.com/photo-1594824172103-2c9ad45dd004?w=150&h=150&fit=crop&crop=face\"\n    }\n  ];\n\n  // Prescription delivery tracking\n  const [prescriptionDelivery, setPrescriptionDelivery] = useState({\n    orderId: \"RX-2024-001\",\n    status: \"In Transit\",\n    estimatedDelivery: \"45 minutes\", \n    deliveryPartner: \"PharmEasy\",\n    trackingSteps: [\n      { status: \"Order Placed\", time: \"2:30 PM\", completed: true },\n      { status: \"Pharmacy Processing\", time: \"2:45 PM\", completed: true },\n      { status: \"Out for Delivery\", time: \"3:15 PM\", completed: true },\n      { status: \"Delivered\", time: \"4:00 PM (estimated)\", completed: false }\n    ]\n  });\n\n  // AI Triage Analysis\n  const runAITriage = async () => {\n    if (!symptoms.trim()) {\n      alert(\"Please describe your symptoms\");\n      return;\n    }\n\n    setTriageLoading(true);\n    \n    // Simulate AI analysis\n    setTimeout(() => {\n      const mockResults = {\n        urgencyLevel: symptoms.toLowerCase().includes('chest pain') || symptoms.toLowerCase().includes('difficulty breathing') \n          ? 'HIGH' : symptoms.toLowerCase().includes('fever') || symptoms.toLowerCase().includes('headache')\n          ? 'MEDIUM' : 'LOW',\n        recommendations: symptoms.toLowerCase().includes('chest pain') \n          ? [\"Seek immediate emergency care\", \"Call ambulance if symptoms worsen\", \"Take prescribed nitroglycerin if available\"]\n          : symptoms.toLowerCase().includes('fever')\n          ? [\"Schedule consultation within 24 hours\", \"Monitor temperature\", \"Stay hydrated\", \"Rest\"]  \n          : [\"Schedule routine consultation\", \"Monitor symptoms\", \"Home care measures sufficient\"],\n        estimatedWaitTime: symptoms.toLowerCase().includes('chest pain') ? \"Emergency - 0 minutes\" : \"15-30 minutes\",\n        suggestedSpecialist: symptoms.toLowerCase().includes('chest pain') ? \"Cardiologist\" : \"General Physician\",\n        confidence: 94\n      };\n      \n      setTriageResult(mockResults);\n      setTriageLoading(false);\n    }, 3000);\n  };\n\n  // Start video call simulation\n  const startCall = (doctorName: string) => {\n    setIsInCall(true);\n    setCallDuration(0);\n    alert(`📞 Connecting to ${doctorName}...\\\\n\\\\n🔒 End-to-end encrypted call\\\\n📹 HD video quality\\\\n🎤 Clear audio`);\n  };\n\n  const endCall = () => {\n    setIsInCall(false);\n    setCallDuration(0);\n    alert(\"Call ended. Consultation summary and prescription will be sent to your email.\");\n  };\n\n  // Call duration timer\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isInCall) {\n      interval = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isInCall]);\n\n  const formatCallTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg text-white overflow-x-hidden\">\n      <Navigation />\n      <div className=\"pt-20\">\n        <section className=\"py-20 px-6\">\n          <div className=\"container mx-auto\">\n            \n            {/* Header */}\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl font-bold mb-4 text-glow\">🏥 Advanced Telemedicine Suite</h2>\n              <p className=\"text-xl opacity-80\">AI-powered healthcare delivery with remote monitoring and prescription management</p>\n            </div>\n\n            {/* Service Selection */}\n            <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n              <button \n                onClick={() => setActiveService('ai-triage')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeService === 'ai-triage' ? 'border-2 border-neon-purple' : 'border border-gray-500'\n                }`}\n              >\n                <Activity className=\"w-5 h-5\" />\n                <span>AI Triage</span>\n              </button>\n              \n              <button \n                onClick={() => setActiveService('consultation')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeService === 'consultation' ? 'border-2 border-neon-cyan' : 'border border-gray-500'\n                }`}\n              >\n                <Video className=\"w-5 h-5\" />\n                <span>Video Consultation</span>\n              </button>\n              \n              <button \n                onClick={() => setActiveService('monitoring')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeService === 'monitoring' ? 'border-2 border-green-400' : 'border border-gray-500'\n                }`}\n              >\n                <Monitor className=\"w-5 h-5\" />\n                <span>Remote Monitoring</span>\n              </button>\n              \n              <button \n                onClick={() => setActiveService('pharmacy')}\n                className={`px-6 py-3 rounded-full glass-dark hover-glow transition-all flex items-center space-x-2 ${\n                  activeService === 'pharmacy' ? 'border-2 border-orange-400' : 'border border-gray-500'\n                }`}\n              >\n                <Truck className=\"w-5 h-5\" />\n                <span>Prescription Delivery</span>\n              </button>\n            </div>\n\n            {/* AI Triage System */}\n            {activeService === 'ai-triage' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">🤖 AI-Powered Medical Triage</h3>\n                  <p className=\"text-lg opacity-80\">Describe your symptoms for instant AI analysis and priority assessment</p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  <GlassCard className=\"hover-glow\">\n                    <h4 className=\"text-xl font-bold text-neon-purple mb-4\">Symptom Analysis</h4>\n                    \n                    <div className=\"space-y-4 mb-6\">\n                      <div>\n                        <label className=\"block text-sm font-semibold mb-2\">Describe your symptoms in detail:</label>\n                        <textarea\n                          value={symptoms}\n                          onChange={(e) => setSymptoms(e.target.value)}\n                          className=\"w-full p-4 glass-dark rounded-lg border border-neon-purple/30 bg-black/20 text-white resize-none\"\n                          rows={4}\n                          placeholder=\"e.g., I have been experiencing chest pain and shortness of breath for the last 2 hours...\"\n                        />\n                      </div>\n                      \n                      <button\n                        onClick={runAITriage}\n                        disabled={triageLoading || !symptoms.trim()}\n                        className=\"w-full p-3 bg-neon-purple/20 border border-neon-purple rounded-lg hover:bg-neon-purple/30 transition-all text-white font-bold disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        {triageLoading ? (\n                          <div className=\"flex items-center justify-center space-x-2\">\n                            <div className=\"w-5 h-5 border-2 border-neon-purple border-t-transparent rounded-full animate-spin\"></div>\n                            <span>Analyzing symptoms...</span>\n                          </div>\n                        ) : (\n                          '🧠 Run AI Analysis'\n                        )}\n                      </button>\n                    </div>\n                  </GlassCard>\n                  \n                  {triageResult && (\n                    <GlassCard className=\"hover-glow\">\n                      <h4 className=\"text-xl font-bold text-green-400 mb-4\">AI Triage Results</h4>\n                      \n                      <div className=\"space-y-4\">\n                        <div className={`p-4 rounded-lg border ${\n                          triageResult.urgencyLevel === 'HIGH' ? 'bg-red-500/20 border-red-500' :\n                          triageResult.urgencyLevel === 'MEDIUM' ? 'bg-orange-500/20 border-orange-500' :\n                          'bg-green-500/20 border-green-500'\n                        }`}>\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <span className=\"font-bold\">Urgency Level:</span>\n                            <span className={`font-bold ${\n                              triageResult.urgencyLevel === 'HIGH' ? 'text-red-400' :\n                              triageResult.urgencyLevel === 'MEDIUM' ? 'text-orange-400' :\n                              'text-green-400'\n                            }`}>\n                              {triageResult.urgencyLevel}\n                            </span>\n                          </div>\n                          <div className=\"text-sm opacity-80\">\n                            Estimated Wait Time: {triageResult.estimatedWaitTime}\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <h5 className=\"font-bold mb-2\">Recommendations:</h5>\n                          <ul className=\"space-y-1 text-sm\">\n                            {triageResult.recommendations.map((rec: string, idx: number) => (\n                              <li key={idx} className=\"flex items-start space-x-2\">\n                                <CheckCircle className=\"w-4 h-4 text-green-400 mt-0.5 flex-shrink-0\" />\n                                <span>{rec}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                        \n                        <div className=\"flex justify-between text-sm\">\n                          <span>Suggested Specialist:</span>\n                          <span className=\"text-neon-cyan font-bold\">{triageResult.suggestedSpecialist}</span>\n                        </div>\n                        \n                        <div className=\"flex justify-between text-sm\">\n                          <span>AI Confidence:</span>\n                          <span className=\"text-green-400 font-bold\">{triageResult.confidence}%</span>\n                        </div>\n                        \n                        {triageResult.urgencyLevel !== 'LOW' && (\n                          <button\n                            className=\"w-full p-3 bg-neon-cyan/20 border border-neon-cyan rounded-lg hover:bg-neon-cyan/30 transition-all text-white font-bold\"\n                            onClick={() => setActiveService('consultation')}\n                          >\n                            🚀 Book Immediate Consultation\n                          </button>\n                        )}\n                      </div>\n                    </GlassCard>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Video Consultation */}\n            {activeService === 'consultation' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">📹 Video Consultation</h3>\n                  <p className=\"text-lg opacity-80\">Connect with qualified doctors instantly</p>\n                </div>\n                \n                {isInCall ? (\n                  /* Active Call Interface */\n                  <GlassCard className=\"hover-glow\">\n                    <div className=\"text-center mb-6\">\n                      <div className=\"w-32 h-32 bg-gradient-to-r from-neon-cyan to-neon-purple rounded-full mx-auto mb-4 flex items-center justify-center\">\n                        <Video className=\"w-16 h-16 text-white\" />\n                      </div>\n                      <h4 className=\"text-2xl font-bold text-neon-cyan mb-2\">Dr. Priya Sharma</h4>\n                      <p className=\"text-lg opacity-80\">General Physician</p>\n                      <div className=\"text-xl font-mono text-green-400 mt-4\">\n                        {formatCallTime(callDuration)}\n                      </div>\n                    </div>\n                    \n                    {/* Call Controls */}\n                    <div className=\"flex justify-center space-x-6\">\n                      <button className=\"w-14 h-14 bg-gray-600/20 border border-gray-500 rounded-full flex items-center justify-center hover:bg-gray-600/30 transition-all\">\n                        <Mic className=\"w-6 h-6\" />\n                      </button>\n                      <button className=\"w-14 h-14 bg-gray-600/20 border border-gray-500 rounded-full flex items-center justify-center hover:bg-gray-600/30 transition-all\">\n                        <Camera className=\"w-6 h-6\" />\n                      </button>\n                      <button \n                        onClick={endCall}\n                        className=\"w-14 h-14 bg-red-500/20 border border-red-500 rounded-full flex items-center justify-center hover:bg-red-500/30 transition-all\"\n                      >\n                        <Phone className=\"w-6 h-6\" />\n                      </button>\n                      <button className=\"w-14 h-14 bg-gray-600/20 border border-gray-500 rounded-full flex items-center justify-center hover:bg-gray-600/30 transition-all\">\n                        <MessageCircle className=\"w-6 h-6\" />\n                      </button>\n                    </div>\n                    \n                    {/* Connection Status */}\n                    <div className=\"flex justify-center items-center space-x-4 mt-6 text-sm text-green-400\">\n                      <Wifi className=\"w-4 h-4\" />\n                      <span>Connection: Excellent</span>\n                      <Signal className=\"w-4 h-4\" />\n                      <span>HD Quality</span>\n                      <Shield className=\"w-4 h-4\" />\n                      <span>Encrypted</span>\n                    </div>\n                  </GlassCard>\n                ) : (\n                  /* Available Doctors */\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                    {availableDoctors.map(doctor => (\n                      <GlassCard key={doctor.id} className=\"hover-glow\">\n                        <div className=\"text-center mb-4\">\n                          <img\n                            src={doctor.image}\n                            alt={doctor.name}\n                            className=\"w-20 h-20 rounded-full mx-auto mb-4 border-2 border-neon-cyan\"\n                          />\n                          <h4 className=\"text-xl font-bold text-neon-cyan mb-1\">{doctor.name}</h4>\n                          <p className=\"text-sm text-neon-purple mb-2\">{doctor.specialty}</p>\n                          <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                            <Star className=\"w-4 h-4 text-yellow-400\" />\n                            <span className=\"text-sm\">{doctor.rating} ({doctor.experience})</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-3 mb-6 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Consultation Fee:</span>\n                            <span className=\"text-green-400 font-bold\">₹{doctor.consultationFee}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Availability:</span>\n                            <span className=\"text-orange-400 font-bold\">{doctor.availability}</span>\n                          </div>\n                          <div>\n                            <span>Languages: </span>\n                            <span className=\"text-neon-cyan\">{doctor.languages.join(\", \")}</span>\n                          </div>\n                        </div>\n                        \n                        <button \n                          onClick={() => startCall(doctor.name)}\n                          className=\"w-full p-3 bg-neon-cyan/20 border border-neon-cyan rounded-lg hover:bg-neon-cyan/30 transition-all text-white font-bold\"\n                        >\n                          📹 Start Video Call\n                        </button>\n                      </GlassCard>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Remote Monitoring */}\n            {activeService === 'monitoring' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">📊 Remote Health Monitoring</h3>\n                  <p className=\"text-lg opacity-80\">Real-time vital signs tracking with connected devices</p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  {/* Current Vital Signs */}\n                  <GlassCard className=\"hover-glow\">\n                    <h4 className=\"text-xl font-bold text-green-400 mb-6\">Current Vital Signs</h4>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                      <div className=\"text-center p-4 glass-dark rounded-lg\">\n                        <Heart className=\"w-8 h-8 text-red-400 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-red-400\">{vitalSigns.heartRate}</div>\n                        <div className=\"text-sm opacity-70\">BPM</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 glass-dark rounded-lg\">\n                        <Activity className=\"w-8 h-8 text-blue-400 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-blue-400\">{vitalSigns.bloodPressure}</div>\n                        <div className=\"text-sm opacity-70\">mmHg</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 glass-dark rounded-lg\">\n                        <Volume2 className=\"w-8 h-8 text-green-400 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-green-400\">{vitalSigns.oxygenSat}%</div>\n                        <div className=\"text-sm opacity-70\">SpO2</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 glass-dark rounded-lg\">\n                        <Stethoscope className=\"w-8 h-8 text-orange-400 mx-auto mb-2\" />\n                        <div className=\"text-2xl font-bold text-orange-400\">{vitalSigns.temperature}°F</div>\n                        <div className=\"text-sm opacity-70\">Temperature</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-center text-green-400 font-bold\">\n                      ✅ All vitals within normal range\n                    </div>\n                  </GlassCard>\n                  \n                  {/* Connected Devices */}\n                  <GlassCard className=\"hover-glow\">\n                    <h4 className=\"text-xl font-bold text-neon-cyan mb-6\">Connected Devices</h4>\n                    \n                    <div className=\"space-y-4\">\n                      {monitoringDevices.map(device => (\n                        <div key={device.id} className=\"p-4 glass-dark rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h5 className=\"font-bold\">{device.name}</h5>\n                            <div className={`w-3 h-3 rounded-full ${\n                              device.status === 'connected' ? 'bg-green-400' : 'bg-red-400'\n                            }`}></div>\n                          </div>\n                          \n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between\">\n                              <span>Status:</span>\n                              <span className={device.status === 'connected' ? 'text-green-400' : 'text-red-400'}>\n                                {device.status.charAt(0).toUpperCase() + device.status.slice(1)}\n                              </span>\n                            </div>\n                            \n                            <div className=\"flex justify-between\">\n                              <span>Battery:</span>\n                              <div className=\"flex items-center space-x-2\">\n                                <Battery className={`w-4 h-4 ${\n                                  device.batteryLevel > 50 ? 'text-green-400' : \n                                  device.batteryLevel > 20 ? 'text-orange-400' : 'text-red-400'\n                                }`} />\n                                <span>{device.batteryLevel}%</span>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex justify-between\">\n                              <span>Last Reading:</span>\n                              <span className=\"text-neon-cyan\">{device.lastReading}</span>\n                            </div>\n                            \n                            <div className=\"flex justify-between font-bold\">\n                              <span>Value:</span>\n                              <span className=\"text-green-400\">{device.value}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <button className=\"w-full mt-6 p-3 bg-neon-cyan/20 border border-neon-cyan rounded-lg hover:bg-neon-cyan/30 transition-all text-white font-bold\">\n                      📱 Add New Device\n                    </button>\n                  </GlassCard>\n                </div>\n              </div>\n            )}\n\n            {/* Prescription Delivery */}\n            {activeService === 'pharmacy' && (\n              <div className=\"space-y-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-3xl font-bold mb-4\">🚚 Prescription Delivery</h3>\n                  <p className=\"text-lg opacity-80\">Track your medicine delivery in real-time</p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  {/* Delivery Tracking */}\n                  <GlassCard className=\"hover-glow\">\n                    <h4 className=\"text-xl font-bold text-orange-400 mb-6\">Delivery Tracking</h4>\n                    \n                    <div className=\"mb-6\">\n                      <div className=\"flex justify-between items-center mb-4\">\n                        <span className=\"font-bold\">Order ID:</span>\n                        <span className=\"text-neon-cyan\">{prescriptionDelivery.orderId}</span>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center mb-4\">\n                        <span className=\"font-bold\">Status:</span>\n                        <span className=\"text-green-400 font-bold\">{prescriptionDelivery.status}</span>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center mb-6\">\n                        <span className=\"font-bold\">ETA:</span>\n                        <span className=\"text-orange-400 font-bold\">{prescriptionDelivery.estimatedDelivery}</span>\n                      </div>\n                      \n                      {/* Delivery Progress */}\n                      <div className=\"space-y-4\">\n                        {prescriptionDelivery.trackingSteps.map((step, idx) => (\n                          <div key={idx} className=\"flex items-center space-x-4\">\n                            <div className={`w-6 h-6 rounded-full flex items-center justify-center ${\n                              step.completed ? 'bg-green-400 text-black' : 'bg-gray-600 text-white'\n                            }`}>\n                              {step.completed ? '✓' : idx + 1}\n                            </div>\n                            \n                            <div className=\"flex-1\">\n                              <div className={`font-semibold ${step.completed ? 'text-green-400' : 'text-gray-400'}`}>\n                                {step.status}\n                              </div>\n                              <div className=\"text-sm opacity-70\">{step.time}</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <button className=\"w-full p-3 bg-orange-400/20 border border-orange-400 rounded-lg hover:bg-orange-400/30 transition-all text-white font-bold\">\n                      📞 Contact Delivery Partner\n                    </button>\n                  </GlassCard>\n                  \n                  {/* Order Details */}\n                  <GlassCard className=\"hover-glow\">\n                    <h4 className=\"text-xl font-bold text-neon-purple mb-6\">Order Details</h4>\n                    \n                    <div className=\"space-y-4 mb-6\">\n                      <div className=\"p-4 glass-dark rounded-lg\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <Pill className=\"w-6 h-6 text-neon-purple\" />\n                          <div>\n                            <div className=\"font-bold\">Paracetamol 500mg</div>\n                            <div className=\"text-sm opacity-70\">Qty: 20 tablets</div>\n                          </div>\n                        </div>\n                        <div className=\"text-green-400 font-bold\">₹45.00</div>\n                      </div>\n                      \n                      <div className=\"p-4 glass-dark rounded-lg\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <Pill className=\"w-6 h-6 text-neon-purple\" />\n                          <div>\n                            <div className=\"font-bold\">Amoxicillin 250mg</div>\n                            <div className=\"text-sm opacity-70\">Qty: 10 capsules</div>\n                          </div>\n                        </div>\n                        <div className=\"text-green-400 font-bold\">₹125.00</div>\n                      </div>\n                      \n                      <div className=\"border-t border-gray-600 pt-4\">\n                        <div className=\"flex justify-between text-lg font-bold\">\n                          <span>Total Amount:</span>\n                          <span className=\"text-green-400\">₹170.00</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm opacity-70\">\n                          <span>Delivery Fee:</span>\n                          <span>Free</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <button className=\"w-full p-3 bg-neon-purple/20 border border-neon-purple rounded-lg hover:bg-neon-purple/30 transition-all text-white font-bold\">\n                      📋 View Prescription\n                    </button>\n                  </GlassCard>\n                </div>\n              </div>\n            )}\n\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":30566}},"version":1}